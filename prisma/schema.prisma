// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.String //@db.Text
  access_token             String?  @db.String //@db.Text
  id_token                 String?  @db.String //@db.Text
  data                     Json?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  session_state            String?
  state                    String?
  ok                       Boolean?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createMessage Message[] @relation("createMessage")
  updateMessage Message[] @relation("updateMessage")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  channel     String
  message     String
  cronId      String
  createdAt   DateTime @default(now())
  createdBy   User     @relation("createMessage", fields: [createdById], references: [id])
  createdById String
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateMessage", fields: [updatedById], references: [id])
  updatedById String
}

model ConvoStore {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @unique
  value          String
  expiresAt      DateTime
}

model Coworking {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid              String    @unique
  threadTimestamp   String
  jrThreadTimestamp String
  startTime         DateTime
  endTime           DateTime?
  createdAt         DateTime? @default(now())
}

model CoworkingAttendee {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  slackId    String  @unique
  slackOrgId String?
  name       String
  image      String?

  endTime   DateTime?
  createdAt DateTime? @default(now())
}

model AppInstalls {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  service   String
  installId String
  scopes    String?
}

model LinkedIssues {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  asanaTicket   String  @unique
  githubOwner   String
  githubRepo    String
  githubIssue   String
  issueUrl      String
  attachmentId  String?
  webhookId     String?
  webhookSecret String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model ActiveOrg {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  githubOwner String       @unique
  repos       ActiveRepo[]
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
}

model ActiveRepo {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  org          ActiveOrg   @relation(fields: [orgId], references: [id])
  orgId        String      @db.ObjectId
  repo         String
  asanaBoard   AsanaBoard? @relation(fields: [asanaBoardId], references: [id])
  asanaBoardId String?     @db.ObjectId

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([orgId, repo])
}

model AsanaBoard {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  boardId String
  repos   ActiveRepo[]
}

model AsanaWebhook {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  webhookId String @unique
  token     String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
