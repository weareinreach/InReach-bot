// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  state             String?
  ok                Boolean?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createMessage Message[] @relation("createMessage")
  updateMessage Message[] @relation("updateMessage")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  channel     String
  message     String
  cronId      String
  createdAt   DateTime @default(now())
  createdBy   User     @relation("createMessage", fields: [createdById], references: [id])
  createdById String
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updateMessage", fields: [updatedById], references: [id])
  updatedById String
}

model ConvoStore {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @unique
  value          String
  expiresAt      DateTime
}

model Coworking {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid              String    @unique
  threadTimestamp   String
  jrThreadTimestamp String
  startTime         DateTime
  endTime           DateTime?
}
