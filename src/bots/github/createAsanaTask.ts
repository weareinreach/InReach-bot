import { asanaClient } from '../asana'
import { prisma } from 'util/prisma'
import type { IssuesOpenedEvent } from '@octokit/webhooks-types'
import invariant from 'tiny-invariant'
import { attachIssueToGH } from '../asana/attachIssue'
import { extractTaskFromBlock, githubIssueRegex } from 'util/regex'

const asanaWorkspace = process.env.ASANA_WORKSPACE

/**
 * It creates an Asana task, attaches the GitHub issue to it, and then attaches the Asana task to the
 * GitHub issue
 * @param payload - IssuesOpenedEvent
 */
export const createAsanaTask = async (payload: IssuesOpenedEvent) => {
	try {
		const asana = await asanaClient()

		const existingTask = extractTaskFromBlock.exec(payload.issue.body ?? '')
		if (existingTask?.length) {
			invariant(existingTask[0])
			const attachedTask = await asana.attachments.findByTask(existingTask[0])
			if (
				attachedTask.data.some((task) => githubIssueRegex.test(task.view_url))
			) {
				console.log('Issue already attached to task')
				return
			}
		}

		const asanaProject = await prisma.activeRepo.findFirstOrThrow({
			where: {
				repo: payload.repository.name,
			},
			select: {
				asanaBoard: {
					select: { boardId: true },
				},
			},
		})

		invariant(asanaProject.asanaBoard?.boardId, 'No board returned')

		const asanaBoard = asanaProject.asanaBoard.boardId

		const asanaTask = await asana.tasks.create({
			name: payload.issue.title,
			notes: payload.issue.body ?? undefined,
			workspace: asanaWorkspace,
			projects: [asanaBoard],
		})
		console.log('asana task result', asanaTask)
		console.log('asana attach payload', {
			name: payload.issue.title,
			parent: asanaTask.gid,
			resource_subtype: 'external',
			url: payload.issue.html_url,
		})
		const attachedIssue: AttachResponse = await asana.dispatcher.post(
			'/attachments',
			{
				name: payload.issue.title,
				parent: asanaTask.gid,
				resource_subtype: 'external',
				url: payload.issue.html_url,
			}
		)
		const attachedToGH = await attachIssueToGH({
			asana_ticket: asanaTask.gid,
			asana_workspace: asanaBoard,
			attachment: attachedIssue.data.gid,
			issue_number: payload.issue.number,
			owner: payload.repository.owner.login,
			repo: payload.repository.name,
		})
		return {
			task: asanaTask,
			issue: attachedToGH,
		}
	} catch (err) {
		console.error(err)
	}
}

// Generated by https://quicktype.io

export interface AttachResponse {
	data: Data
}

export interface Data {
	gid: string
	resource_type: string
	name: string
	resource_subtype: string
	created_at: string
	download_url: string
	host: string
	parent: Parent
	permanent_url: string
	size: number
	view_url: string
}

export interface Parent {
	gid: string
	resource_type: string
	name: string
	resource_subtype: string
}
