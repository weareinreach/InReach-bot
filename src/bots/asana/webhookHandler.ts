import { detachIssue } from './detachIssue'
import { DateTime } from 'luxon'
import invariant from 'tiny-invariant'

const deletedAttachment: CheckCase = ({ action, type }) =>
	action === 'deleted' && type === 'attachment'

const taskChanged: CheckCase = ({ action, type }) =>
	action === 'changed' && type === 'task'

const statusChanged: CheckCase = ({ action, type, parent }) =>
	action === 'added' && type === 'task' && parent === 'section'

/**
 * It takes an array of webhook events and then calls a function to handle
 * each event
 * @param events - Array<WebhookEvent>
 */
export const webhookHandler = async (events: Array<WebhookEvent>) => {
	console.group(
		`${DateTime.now().toLocaleString(
			DateTime.TIME_24_WITH_SHORT_OFFSET
		)} Webhook handler started`
	)
	console.dir(events)
	await Promise.all(
		events.map(async (event: WebhookEvent) => {
			const { action } = event
			const type = event.resource.resource_type
			const parent = event.parent?.resource_type ?? ''
			switch (true) {
				case deletedAttachment({ action, type }):
					const result = await detachIssue(event)
					return result
					break
				case taskChanged({ action, type }):
					console.log('handle task change')
					break
				case statusChanged({ action, type, parent }):
					console.log('handle column switch')
					break
				default:
					return
			}
		})
	)
}

type CheckCase = (args: Record<string, string>) => boolean

// Generated by https://quicktype.io

export interface WebhookEvent {
	action: 'added' | 'changed' | 'removed' | 'deleted'
	change: Change
	created_at: string
	parent: Parent | null
	resource: Resource
	type: string
	user: Parent
}

type Change = {
	action: string
	field: string
} & ChangeType<'added_value' | 'new_value' | 'removed_value'>

interface Value {
	gid: string
	resource_type: string
}
interface Resource {
	gid: string
	resource_type: string
	resouce_subtype?: string
}

interface Parent {
	gid: string
	resource_type: string
	name?: string
}

type ChangeType<Type> = {
	[Property in keyof Type]: Value
}
