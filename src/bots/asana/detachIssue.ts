import { prisma } from 'util/prisma'
import { githubClient } from '../github'

/**
 * It finds all the issues that have the attachmentId in the attachments array, detaches all issues
 * from GitHub, and then deletes the issues from the database
 * @param {WebhookEvent[]} events - WebhookEvent[]
 * @returns a boolean value.
 */
export const handleDetach = async (events: WebhookEvent[]) => {
	/* Filtering the events to only those that have been deleted and then mapping the gid of the
   resource. */
	const attachments = events
		.filter((event) => event.action === 'deleted')
		.map((event) => event.resource.gid)

	/* Finding all the issues that have the attachmentId in the attachments array. */
	const issues = await prisma.linkedIssues.findMany({
		where: {
			attachmentId: {
				in: attachments,
			},
		},
		select: {
			id: true,
			githubIssue: true,
			githubOwner: true,
			githubRepo: true,
		},
	})
	const deleteList: string[] = []

	/* Detaching all issues from GitHub. */
	const detachStatus = await Promise.all(
		issues.map(async (issue) => {
			const detach = await detachIssueFromGH(issue)
			if (detach) deleteList.push(issue.id)
			return detach
		})
	).then((x) => x.reduce((prev, curr) => prev === curr, true))

	/* Deleting the issues from the database. */
	if (detachStatus)
		await prisma.linkedIssues.deleteMany({
			where: {
				id: {
					in: deleteList,
				},
			},
		})

	return detachStatus
}

/**
 * It takes a GitHub issue number, owner, and repo, and removes the Asana link from the issue
 * @param {GitHubIssue} params - GitHubIssue
 * @returns A boolean.
 */
const detachIssueFromGH = async (params: GitHubIssue) => {
	try {
		const { githubIssue, githubOwner, githubRepo } = params
		const regex = /(<!--Asana:\d*-->.*<!--\/Asana-->)/gs

		/* Getting the issue from GitHub. */
		const issueCurrent = await githubClient.rest.issues.get({
			issue_number: parseInt(githubIssue),
			owner: githubOwner,
			repo: githubRepo,
		})

		/* Updating the issue on GitHub. */
		const issueUpdated = await githubClient.rest.issues.update({
			issue_number: parseInt(githubIssue),
			owner: githubOwner,
			repo: githubRepo,
			body: issueCurrent.data.body!.replace(regex, ''),
		})
		if (issueUpdated.status === 200) {
			return true
		}
		return false
	} catch (err) {
		return false
	}
}

interface GitHubIssue {
	id: string
	githubIssue: string
	githubOwner: string
	githubRepo: string
}

// Generated by https://quicktype.io

export interface WebhookEvent {
	user: User
	created_at: string
	action: 'added' | 'removed' | 'deleted' | 'undeleted' | 'changed'
	resource: Parent
	parent: Parent
}

interface Parent {
	gid: string
	resource_type: string
	resource_subtype: string
}

interface User {
	gid: string
	resource_type: string
}
