/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/attachments/{attachment_gid}": {
    /** Get the full record for a single attachment. */
    get: operations["getAttachment"];
    parameters: {
      path: {
        /** Globally unique identifier for the attachment. */
        attachment_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/attachments": {
    /** Returns the compact records for all attachments on the task. */
    get: operations["getAttachmentsForTask"];
    /**
     * Upload an attachment.
     *
     * This method uploads an attachment to a task and returns the compact
     * record for the created attachment object. It is not possible to attach
     * files from third party services such as Dropbox, Box & Google Drive via
     * the API. You must download the file content first and then upload it as
     * any other attachment.
     *
     * The 100MB size limit on attachments in Asana is enforced on this endpoint.
     *
     * This endpoint expects a multipart/form-data encoded request containing
     * the full contents of the file to be uploaded.
     *
     * Below is an example of what a well formed multipart/form-data encoded
     * request might look like.
     *
     * ```
     * Authorization: Basic <BASE64_ENCODED_API_KEY>
     * Content-Type: multipart/form-data; boundary=<UNIQUE_BOUNDARY>
     * User-Agent: Java/1.7.0_76
     * Host: localhost
     * Accept: *\/*
     * Connection: keep-alive
     * Content-Length: 141
     *
     * --<UNIQUE_BOUNDARY>
     * Content-Disposition: form-data; name="file"; filename="example.txt"
     * Content-Type: text/plain
     *
     * <RAW_FILE_DATA>
     *
     * --<UNIQUE_BOUNDARY>--
     * ```
     *
     * Requests made should follow the HTTP/1.1 specification that line
     * terminators are of the form `CRLF` or `\r\n` outlined
     * [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules)
     * in order for the server to reliably and properly handle the request.
     */
    post: operations["uploadAttachmentToTask"];
    parameters: {
      path: {
        /** Globally unique identifier for the task. */
        task_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/batch": {
    /**
     * There are many cases where you want to accomplish a variety of work in
     * the Asana API but want to minimize the number of HTTP requests you make.
     * For example:
     *
     * * Modern browsers limit the number of requests that a single web page can
     *   make at once.
     * * Mobile apps will use more battery life to keep the cellular radio on
     *   when making a series of requests.
     * * There is an overhead cost to developing software that can make multiple
     *   requests in parallel.
     * * Some cloud platforms handle parallelism poorly, or disallow it
     *   entirely.
     * * To make development easier in these use cases, Asana provides a **batch
     *   API** that enables developers to perform multiple “actions” by making
     *   only a single HTTP request.
     *
     * **Making a Batch Request**
     *
     * To make a batch request, send a `POST` request to `/batch`. Like other
     * `POST` endpoints, the body should contain a `data` envelope. Inside this
     * envelope should be a single `actions` field, containing a list of
     * “action” objects.  Each action represents a standard request to an
     * existing endpoint in the Asana API.
     *
     * **The maximum number of actions allowed in a single batch request is 10**.
     * Making a batch request with no actions in it will result in a `400 Bad
     * Request`.
     *
     * When the batch API receives the list of actions to execute, it will
     * dispatch those actions to the already-implemented endpoints specified by
     * the `relative_path` and `method` for each action. This happens in
     * parallel, so all actions in the request will be processed simultaneously.
     * There is no guarantee of the execution order for these actions, nor is
     * there a way to use the output of one action as the input of another
     * action (such as creating a task and then commenting on it).
     *
     * The response to the batch request will contain (within the `data`
     * envelope) a list of result objects, one for each action. The results are
     * guaranteed to be in the same order as the actions in the request, e.g.,
     * the first result in the response corresponds to the first action in the
     * request.
     *
     * The batch API will always attempt to return a `200 Success` response with
     * individual result objects for each individual action in the request. Only
     * in certain cases (such as missing authorization or malformed JSON in the
     * body) will the entire request fail with another status code. Even if
     * every individual action in the request fails, the batch API will still
     * return a `200 Success` response, and each result object in the response
     * will contain the errors encountered with each action.
     *
     * **Rate Limiting**
     *
     * The batch API fully respects all of our rate limiting. This means that a
     * batch request counts against *both* the standard rate limiter and the
     * concurrent request limiter as though you had made a separate HTTP request
     * for every individual action. For example, a batch request with five
     * actions counts as five separate requests in the standard rate limiter,
     * and counts as five concurrent requests in the concurrent request limiter.
     * The batch request itself incurs no cost.
     *
     * If any of the actions in a batch request would exceed any of the enforced
     * limits, the *entire* request will fail with a `429 Too Many Requests`
     * error. This is to prevent the unpredictability of which actions might
     * succeed if not all of them could succeed.
     *
     * **Restrictions**
     *
     * Not every API endpoint can be accessed through the batch API.
     * Specifically, the following actions cannot be taken and will result in a
     * `400 Bad Request` for that action:
     *
     * * Uploading attachments
     * * Creating, getting, or deleting organization exports
     * * Any SCIM operations
     * * Nested calls to the batch API
     */
    post: operations["batchRequest"];
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/custom_fields": {
    /**
     * Creates a new custom field in a workspace. Every custom field is required
     * to be created in a specific workspace, and this workspace cannot be
     * changed once set.
     *
     * A custom field’s name must be unique within a workspace and not conflict
     * with names of existing task properties such as ‘Due Date’ or ‘Assignee’.
     * A custom field’s type must be one of ‘text’, ‘enum’, or ‘number’.
     *
     * Returns the full record of the newly created custom field.
     */
    post: operations["createCustomField"];
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/custom_fields/{custom_field_gid}": {
    /**
     * Get the complete definition of a custom field’s metadata.
     *
     * Since custom fields can be defined for one of a number of types, and
     * these types have different data and behaviors, there are fields that are
     * relevant to a particular type. For instance, as noted above, enum_options
     * is only relevant for the enum type and defines the set of choices that
     * the enum could represent. The examples below show some of these
     * type-specific custom field definitions.
     *
     * **Get the metadata for a custom field of type ‘text’**
     *
     * ```
     * # Request
     * curl -H "Authorization: Bearer <personal_access_token>" \
     * https://app.asana.com/api/1.0/custom_fields/124578
     * ```
     *
     * ```
     * # Response
     * HTTP/1.1 200
     * {
     *   "data": [
     *     {
     *       "id": 134679,
     *       "name": "Owner",
     *       "description": "Person responsible for task",
     *       "type": "text"
     *     }
     *   ]
     * }
     * ```
     *
     * **Get the metadata for a custom field of type ‘number’**
     *
     * ```
     * # Request
     * curl -H "Authorization: Bearer <personal_access_token>" \
     * https://app.asana.com/api/1.0/custom_fields/124578
     * ```
     *
     * ```
     * # Response
     * HTTP/1.1 200
     * {
     *   "data": [
     *     {
     *       "id": 938271,
     *       "name": "Price",
     *       "description": "In US Dollars",
     *       "type": "number",
     *       "precision": 2
     *     }
     *   ]
     * }
     * ```
     *
     * **Get the metadata for a custom field when that field is of type ‘enum’.**
     *
     * ```
     * # Request
     * curl -H "Authorization: Bearer <personal_access_token>" \
     * https://app.asana.com/api/1.0/custom_fields/124578
     * ```
     *
     * ```
     * # Response
     * HTTP/1.1 200
     * {
     *   "data": [
     *     {
     *       "id": 124578,
     *       "name": "Priority",
     *       "description": "Development team priority",
     *       "type": "enum",
     *       "enum_options": [
     *         {
     *           "id": 789,
     *           "name": "Low",
     *           "enabled": true,
     *           "color": "blue"
     *         },
     *         {
     *           "id": 208,
     *           "name": "Medium",
     *           "enabled": false,
     *           "color": "yellow"
     *         },
     *         {
     *           "id": 439,
     *           "name": "High",
     *           "enabled": true,
     *           "color": "red"
     *         }
     *       ]
     *     }
     *   ]
     * }
     * ```
     */
    get: operations["getCustomField"];
    /**
     * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged
     * When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.
     * A custom field’s `type` cannot be updated.
     * An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`.
     * Locked custom fields can only be updated by the user who locked the field.
     * Returns the complete updated custom field record.
     */
    put: operations["updateCustomField"];
    /**
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.
     * Locked custom fields can only be deleted by the user who locked the field.
     * Returns an empty data record.
     */
    delete: operations["deleteCustomField"];
    parameters: {
      path: {
        /** Globally unique identifier for the custom field. */
        custom_field_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/custom_fields/{custom_field_gid}/enum_options": {
    /**
     * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 50 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list.
     * Locked custom fields can only have enum options added by the user who locked the field.
     * Returns the full record of the newly created enum option.
     */
    post: operations["addEnumOption"];
    parameters: {
      path: {
        /** Globally unique identifier for the custom field. */
        custom_field_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/custom_fields/{custom_field_gid}/enum_options/insert": {
    /**
     * Moves a particular enum option to be either before or after another specified enum option in the custom field.
     * Locked custom fields can only be reordered by the user who locked the field.
     */
    post: operations["reorderEnumOption"];
    parameters: {
      path: {
        /** Globally unique identifier for the custom field. */
        custom_field_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/enum_options/{enum_option_gid}": {
    /**
     * Updates an existing enum option. Enum custom fields require at least one enabled enum option.
     * Locked custom fields can only be updated by the user who locked the field.
     * Returns the full record of the updated enum option.
     */
    put: operations["updateEnumOption"];
    parameters: {
      path: {
        /** Globally unique identifier for the enum option. */
        enum_option_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces/{workspace_gid}/custom_fields": {
    /** Returns a list of the compact representation of all of the custom fields in a workspace. */
    get: operations["getCustomFieldsInWorkspace"];
    parameters: {
      path: {
        /** The workspace or organization to find custom field definitions in. */
        workspace_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/projects/{project_gid}/custom_field_settings": {
    /** Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` and `opt_expand` can be used to include more data than is returned in the compact representation. See the [getting started guide on input/output options](https://asana.com/developers/documentation/getting-started/input-output-options) for more information. */
    get: operations["getCustomFieldSettingsForProject"];
    parameters: {
      path: {
        /** The ID of the project for which to list custom field settings. */
        project_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/portfolios/{portfolio_gid}/custom_field_settings": {
    /** Returns a list of all of the custom fields settings on a portfolio, in compact form. */
    get: operations["getCustomFieldSettingsForPortfolio"];
    parameters: {
      path: {
        /** The ID of the portfolio for which to list custom field settings. */
        portfolio_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/events": {
    /**
     * Returns the full record for all events that have occurred since the sync
     * token was created.
     *
     * A GET request to the endpoint /[path_to_resource]/events can be made in
     * lieu of including the resource ID in the data for the request.
     */
    get: operations["getEvents"];
    parameters: {
      query: {
        /** A resource ID to subscribe to. The resource can be a task or project. */
        resource: number;
        /**
         * A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated.
         * **Note**: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token.If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.
         */
        sync?: string;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/organization_exports": {
    /** This method creates a request to export an Organization. Asana will complete the export at some point after you create the request. */
    post: operations["createOrganizationExport"];
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/organization_exports/{organization_export_gid}": {
    /** Returns details of a previously-requested Organization export. */
    get: operations["getOrganizationExport"];
    parameters: {
      path: {
        /** Globally unique identifier for the organization export. */
        organization_export_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/portfolios": {
    /** Returns a list of the portfolios in compact representation that are owned by the current API user. */
    get: operations["getPortfolios"];
    /**
     * Creates a new portfolio in the given workspace with the supplied name.
     *
     * Note that portfolios created in the Asana UI may have some state
     * (like the “Priority” custom field) which is automatically added
     * to the portfolio when it is created. Portfolios created via our
     * API will **not** be created with the same initial state to allow
     * integrations to create their own starting state on a portfolio.
     */
    post: operations["createPortfolio"];
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/portfolios/{portfolio_gid}": {
    /** Returns the complete portfolio record for a single portfolio. */
    get: operations["getPortfolio"];
    /**
     * An existing portfolio can be updated by making a PUT request on the URL for
     * that portfolio. Only the fields provided in the `data` block will be updated;
     * any unspecified fields will remain unchanged.
     *
     * Returns the complete updated portfolio record.
     */
    put: operations["updateportfolio"];
    /**
     * An existing portfolio can be deleted by making a DELETE request on
     * the URL for that portfolio.
     *
     * Returns an empty data record.
     */
    delete: operations["deletePortfolio"];
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/portfolios/{portfolio_gid}/items": {
    /** Get a list of the items (projects) in compact form in a portfolio. */
    get: operations["getPortfolioItems"];
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/portfolios/{portfolio_gid}/addItem": {
    /**
     * Add an item (project) to a portfolio.
     * Returns an empty data block.
     */
    post: operations["addPortfolioItem"];
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** The item (project) to add to the portfolio. */
        item: string;
        /** An id of an item (project) in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_before: string;
        /** An id of an item (project) in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_after: string;
      };
    };
  };
  "/portfolios/{portfolio_gid}/removeItem": {
    /**
     * Remove an item (project) from a portfolio.
     * Returns an empty data block.
     */
    post: operations["removePortfolioItem"];
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** The item (project) to remove from the portfolio. */
        item: string;
      };
    };
  };
  "/portfolios/{portfolio_gid}/addCustomFieldSetting": {
    /** Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio. */
    post: operations["portfolio.addCustomFieldSetting"];
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** The custom field to associate with this portfolio. */
        custom_field: number;
        /** Whether this field should be considered important to this portfolio (for instance, to display in the list view of items in the portfolio). */
        is_important?: boolean;
        /** An id of a Custom Field Setting on this portfolio, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_before?: number;
        /** An id of a Custom Field Setting on this portfolio, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_after?: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
      };
    };
  };
  "/portfolios/{portfolio_gid}/removeCustomFieldSetting": {
    /** Removes a custom field setting from a portfolio. */
    post: operations["portfolio.removeCustomFieldSetting"];
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** The custom field to remove from this portfolio. */
        custom_field: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
      };
    };
  };
  "/projects/{project_gid}/project_memberships": {
    /** Returns the compact project membership records for the project. */
    get: operations["getProjectMembershipsForProject"];
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** The user to filter results on. */
        user?: components["parameters"]["user_query_param"];
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/project_memberships/{project_gid}": {
    /** Returns the complete project record for a single project membership. */
    get: operations["getProjectMembership"];
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/projects/{project_gid}/project_statuses": {
    /** Returns the compact project status update records for all updates on the project. */
    get: operations["getProductStatuses"];
    /**
     * Creates a new status update on the project.
     * Returns the full record of the newly created project status update.
     */
    post: operations["createProjectStatus"];
    parameters: {
      path: {
        /** The project to get statuses from. */
        project_gid: number;
      };
    };
  };
  "/project_statuses/{project_status_gid}": {
    /** Returns the complete record for a single status update. */
    get: operations["getProductStatus"];
    /**
     * Deletes a specific, existing project status update.
     *
     * Returns an empty data record.
     */
    delete: operations["deleteProductStatus"];
    parameters: {
      path: {
        /** The project to get statuses from. */
        project_gid: number;
        /** The project status update to get. */
        project_status_gid: number;
      };
    };
  };
  "/projects": {
    /** Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned. */
    get: operations["getProjects"];
    /**
     * Create a new project in a workspace or team.
     *
     * Every project is required to be created in a specific workspace or
     * organization, and this cannot be changed once set. Note that you can use
     * the `workspace` parameter regardless of whether or not it is an
     * organization.
     *
     * If the workspace for your project is an organization, you must also
     * supply a `team` to share the project with.
     *
     * Returns the full record of the newly created project.
     */
    post: operations["createProject"];
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/projects/{project_gid}": {
    /** Returns the complete project record for a single project. */
    get: operations["getProject"];
    /**
     * A specific, existing project can be updated by making a PUT request on
     * the URL for that project. Only the fields provided in the `data` block
     * will be updated; any unspecified fields will remain unchanged.
     *
     * When using this method, it is best to specify only those fields you wish
     * to change, or else you may overwrite changes made by another user since
     * you last retrieved the task.
     *
     * Returns the complete updated project record.
     */
    put: operations["updateProject"];
    /**
     * A specific, existing project can be deleted by making a DELETE request on
     * the URL for that project.
     *
     * Returns an empty data record.
     */
    delete: operations["deleteProject"];
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/projects/{project_gid}/tasks": {
    /** Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time. */
    get: operations["getProjectTasks"];
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/projects/{project_gid}/addCustomFieldSetting": {
    /** Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project. */
    post: operations["project.addCustomFieldSetting"];
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** The custom field to associate with this project. */
        custom_field: number;
        /** Whether this field should be considered "important" to this project. This may cause it to be displayed more prominently, for example in the task grid. */
        is_important?: boolean;
        /** An id of a Custom Field Setting on this project, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_before?: number;
        /** An id of a Custom Field Setting on this project, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_after?: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
      };
    };
  };
  "/projects/{project_gid}/removeCustomFieldSetting": {
    /** Removes a custom field setting from a project. */
    post: operations["project.removeCustomFieldSetting"];
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** The custom field to remove from this project. */
        custom_field: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
      };
    };
  };
  "/teams/{team_gid}/projects": {
    /** Returns the compact project records for all projects in the team. */
    get: operations["getProjectsInTeam"];
    /**
     * Creates a project shared with the given team.
     *
     * Returns the full record of the newly created project.
     */
    post: operations["createProjectsWithTeam"];
    parameters: {
      path: {
        /** Globally unique identifier for the team. */
        team_gid: components["parameters"]["team_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces/{workspace_gid}/projects": {
    /** Returns the compact project records for all projects in the workspace. */
    get: operations["getProjectsInWorkspace"];
    /**
     * Returns the compact project records for all projects in the workspace.
     *
     * If the workspace for your project is an organization, you must also
     * supply a team to share the project with.
     *
     * Returns the full record of the newly created project.
     */
    post: operations["createProjectsInWorkspace"];
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/projects/{project_gid}/sections": {
    /** Returns the compact records for all sections in the specified project. */
    get: operations["getSectionsInProject"];
    /**
     * Creates a new section in a project.
     * Returns the full record of the newly created section.
     */
    post: operations["createSectionInProject"];
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/sections/{section_gid}": {
    /** Returns the complete record for a single section. */
    get: operations["getSection"];
    /**
     * A specific, existing section can be updated by making a PUT request on
     * the URL for that project. Only the fields provided in the `data` block
     * will be updated; any unspecified fields will remain unchanged. (note that
     * at this time, the only field that can be updated is the `name` field.)
     *
     * When using this method, it is best to specify only those fields you wish
     * to change, or else you may overwrite changes made by another user since
     * you last retrieved the task.
     *
     * Returns the complete updated section record.
     */
    put: operations["updateSection"];
    /**
     * A specific, existing section can be deleted by making a DELETE request on
     * the URL for that section.
     *
     * Note that sections must be empty to be deleted.
     *
     * The last remaining section in a board view cannot be deleted.
     *
     * Returns an empty data block.
     */
    delete: operations["deleteSection"];
    parameters: {
      path: {
        /** The globally unique identified for the section. */
        section_gid: components["parameters"]["section_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/projects/{project_gid}/sections/insert": {
    /**
     * Move sections relative to each other in a board view. One of
     * `before_section` or `after_section` is required.
     *
     * Sections cannot be moved between projects.
     *
     * At this point in time, moving sections is not supported in list views,
     * only board views.
     *
     * Returns an empty data block.
     */
    post: operations["moveSection"];
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/stories": {
    /** Returns the compact records for all stories on the task. */
    get: operations["getTaskStories"];
    /**
     * Adds a comment to a task. The comment will be authored by the currently
     * authenticated user, and timestamped when the server receives the
     * request.
     *
     * Returns the full record for the new story added to the task.
     */
    post: operations["createCommentStory"];
    parameters: {
      path: {
        /** The task to get stories from. */
        task_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/stories/{story_gid}": {
    /** Returns the full record for a single story. */
    get: operations["getStory"];
    /** Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified. */
    put: operations["updateStory"];
    /**
     * Deletes a story. A user can only delete stories they have created. Returns an empty data record.
     *
     * Returns an empty data record.
     */
    delete: operations["deleteStory"];
    parameters: {
      path: {
        /** The globally unique identifier for the story. */
        story_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tags": {
    /** Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned. */
    get: operations["queryTags"];
    /**
     * Creates a new tag in a workspace or organization.
     *
     * Every tag is required to be created in a specific workspace or
     * organization, and this cannot be changed once set. Note that you can use
     * the workspace parameter regardless of whether or not it is an
     * organization.
     *
     * Returns the full record of the newly created tag.
     */
    post: operations["createTag"];
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tags/{tag_gid}": {
    /** Returns the complete tag record for a single tag. */
    get: operations["getTag"];
    /**
     * Updates the properties of a tag. Only the fields provided in the `data`
     * block will be updated; any unspecified fields will remain unchanged.
     *
     * When using this method, it is best to specify only those fields you wish
     * to change, or else you may overwrite changes made by another user since
     * you last retrieved the task.
     *
     * Returns the complete updated tag record.
     */
    put: operations["updateTag"];
    parameters: {
      path: {
        /** Globally unique identifier for the tag. */
        tag_gid: components["parameters"]["tag_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tags/{tag_gid}/tasks": {
    /** Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time. */
    get: operations["getTagTasks"];
    parameters: {
      path: {
        /** Globally unique identifier for the tag. */
        tag_gid: components["parameters"]["tag_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces/{workspace_gid}/tags": {
    /** Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned. */
    get: operations["queryAllTagsInWorkspace"];
    /**
     * Creates a new tag in a workspace or organization.
     *
     * Every tag is required to be created in a specific workspace or
     * organization, and this cannot be changed once set. Note that you can use
     * the workspace parameter regardless of whether or not it is an
     * organization.
     *
     * Returns the full record of the newly created tag.
     */
    post: operations["createTagInWorkspace"];
    parameters: {
      path: {
        /** The workspace to filter tags on. */
        workspace_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks": {
    /** Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`. */
    get: operations["queryTasks"];
    /**
     * Creating a new task is as easy as POSTing to the `/tasks` endpoint with a
     * data block containing the fields you’d like to set on the task. Any
     * unspecified fields will take on default values.
     *
     * Every task is required to be created in a specific workspace, and this
     * workspace cannot be changed once set. The workspace need not be set
     * explicitly if you specify `projects` or a `parent` task instead.
     *
     * `projects` can be a comma separated list of projects, or just a single
     * project the task should belong to.
     */
    post: operations["createTask"];
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}": {
    /** Returns the complete task record for a single task. */
    get: operations["getTask"];
    /**
     * A specific, existing task can be updated by making a PUT request on the
     * URL for that task. Only the fields provided in the `data` block will be
     * updated; any unspecified fields will remain unchanged.
     *
     * When using this method, it is best to specify only those fields you wish
     * to change, or else you may overwrite changes made by another user since
     * you last retrieved the task.
     *
     * Returns the complete updated task record.
     */
    put: operations["updateTask"];
    /**
     * A specific, existing task can be deleted by making a DELETE request on
     * the URL for that task. Deleted tasks go into the “trash” of the user
     * making the delete request. Tasks can be recovered from the trash within a
     * period of 30 days; afterward they are completely removed from the system.
     *
     * Returns an empty data record.
     */
    delete: operations["deleteTask"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/subtasks": {
    /** Returns a compact representation of all of the subtasks of a task. */
    get: operations["getSubTasks"];
    /** Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask. */
    post: operations["createSubtask"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/setParent": {
    /** parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent. */
    post: operations["changeSubtaskParent"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/dependencies": {
    /** Returns the compact representations of all of the dependencies of a task. */
    get: operations["getTaskDependencies"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/addDependencies": {
    /** Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 15 dependencies*. */
    post: operations["addTaskDependencies"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/removeDependencies": {
    /** Unlinks a set of dependencies from this task. */
    post: operations["removeTaskDependencies"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/dependents": {
    /** Returns the compact representations of all of the dependents of a task. */
    get: operations["getTaskDependents"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/addDependents": {
    /** Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents*. */
    post: operations["addTaskDependents"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/removeDependents": {
    /** Unlinks a set of dependents from this task. */
    post: operations["removeTaskDependents"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/projects": {
    /** Returns a compact representation of all of the projects the task is in. */
    get: operations["getTaskProjects"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/addProject": {
    /**
     * Adds the task to the specified project, in the optional location
     * specified. If no location arguments are given, the task will be added to
     * the end of the project.
     *
     * `addProject` can also be used to reorder a task within a project or
     * section that already contains it.
     *
     * At most one of `insert_before`, `insert_after`, or `section` should be
     * specified. Inserting into a section in an non-order-dependent way can be
     * done by specifying section, otherwise, to insert within a section in a
     * particular place, specify `insert_before` or `insert_after` and a task
     * within the section to anchor the position of this task.
     *
     * Returns an empty data block.
     */
    post: operations["addProjectToTask"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/removeProject": {
    /**
     * Removes the task from the specified project. The task will still exist in
     * the system, but it will not be in the project anymore.
     *
     * Returns an empty data block.
     */
    post: operations["removeProjectFromTask"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/tags": {
    /** Get a compact representation of all of the tags the task has. */
    get: operations["getTaskTags"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/addTag": {
    /** Adds a tag to a task. Returns an empty data block. */
    post: operations["addTagToTask"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/removeTag": {
    /** Removes a tag from a task. Returns an empty data block. */
    post: operations["removeTagFromTask"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/addFollowers": {
    /**
     * Adds a tag to a task. Returns an empty data block.
     * Each task can be associated with zero or more followers in the system.
     * Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     */
    post: operations["addFollowerToTask"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/tasks/{task_gid}/removeFollowers": {
    /** Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task. */
    post: operations["removeFollowerToTask"];
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/sections/{section_gid}/tasks": {
    /** **Board view only**: Returns the compact section records for all tasks within the given section. */
    get: operations["getSectionTasks"];
    parameters: {
      path: {
        /** The globally unique identified for the section. */
        section_gid: components["parameters"]["section_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces/{workspace_gid}/tasks/search": {
    /** The search endpoint allows you to build complex queries to find and fetch exactly the data you need from Asana. For a more comprehensive description of all the query parameters and limitations of this endpoint, see our [long-form documentation](/developers/documentation/getting-started/search-api) for this feature. */
    get: operations["getWorkspaceTasksSearch"];
    parameters: {
      path: {
        /** The globally unique identifier for the workspace. */
        workspace_gid: number;
        /** The globally unique identified for the section. */
        section_gid: components["parameters"]["section_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/teams/{team_gid}": {
    /** Returns the full record for a single team. */
    get: operations["getTeam"];
    parameters: {
      path: {
        /** Globally unique identifier for the team. */
        team_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/organizations/{organization_gid}/teams": {
    /** Returns the compact records for all teams in the organization visible to the authorized user. */
    get: operations["getAllTeams"];
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        organization_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/users/{user_gid}/teams": {
    /** Returns the compact records for all teams to which the given user is assigned. */
    get: operations["getTeamsForUser"];
    parameters: {
      path: {
        /** An identifier for the user. Can be one of an email address, the globally unique identifier for the user, or the keyword `me` to indicate the current user making the request. */
        user_gid: string | "me" | string;
      };
      query: {
        /** The workspace or organization to filter teams on. */
        organization_gid: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/teams/{team_gid}/users": {
    /** Returns the compact records for all users that are members of the team. */
    get: operations["getUsersForTeam"];
    parameters: {
      path: {
        /** A globally unique identifier for the team. */
        team_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/teams/{team_gid}/addUser": {
    /** The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team. */
    post: operations["addUserToTeam"];
    parameters: {
      path: {
        /** A globally unique identifier for the team. */
        team_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/teams/{team_gid}/removeUser": {
    /** The user making this call must be a member of the team in order to remove themselves or others. */
    post: operations["removeUserFromTeam"];
    parameters: {
      path: {
        /** A globally unique identifier for the team. */
        team_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces/{workspace_gid}/typeahead": {
    /**
     * Retrieves objects in the workspace based via an auto-completion/typeahead
     * search algorithm. This feature is meant to provide results quickly, so do
     * not rely on this API to provide extremely accurate search results. The
     * result set is limited to a single page of results with a maximum size, so
     * you won’t be able to fetch large numbers of results.
     *
     * The typeahead search API provides search for objects from a single
     * workspace. This endpoint should be used to query for objects when
     * creating an auto-completion/typeahead search feature. This API is meant
     * to provide results quickly and should not be relied upon for accurate or
     * exhaustive search results. The results sets are limited in size and
     * cannot be paginated.
     *
     * Queries return a compact representation of each object which is typically
     * the id and name fields. Interested in a specific set of fields or all of
     * the fields?! Of course you are. Use field selectors to manipulate what
     * data is included in a response.
     */
    get: operations["getTypeahead"];
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported. */
        type: "custom_field" | "project" | "tag" | "task" | "user";
        /** The string that will be used to search for relevant objects. If an empty string is passed in, the API will currently return an empty result set. */
        query?: string;
        /** The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned. */
        count?: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/user_task_list/{user_task_list_gid}": {
    /** Returns the full record for a user task list. */
    get: operations["getUserTaskList"];
    parameters: {
      path: {
        /** Globally unique identifier for the user task list. */
        user_task_list_gid: components["parameters"]["user_task_list_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/users/{user_gid}/user_task_list": {
    /** Returns the full record for a user's task list. */
    get: operations["getUsersTaskList"];
    parameters: {
      path: {
        /** Globally unique identifier for the user. */
        user_gid: components["parameters"]["user_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/user_task_lists/{user_task_list_gid}/tasks": {
    /**
     * Returns the compact list of tasks in a user’s My Tasks list. The returned tasks will be in order within each assignee status group of `Inbox`, `Today`, and `Upcoming`.
     * **Note:** tasks in `Later` have a different ordering in the Asana web app than the other assignee status groups; this endpoint will still return them in list order in `Later` (differently than they show up in Asana, but the same order as in Asana’s mobile apps).
     * **Note:** Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.
     * **Note:** Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)
     */
    get: operations["getUserTaskListTasks"];
    parameters: {
      query: {
        /** Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. */
        completed_since?: string;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
      path: {
        /** Globally unique identifier for the user task list. */
        user_task_list_gid: components["parameters"]["user_task_list_path_gid"];
      };
    };
  };
  "/users": {
    /**
     * Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter.
     * Results are sorted by user ID.
     */
    get: operations["getAllUsers"];
    parameters: {
      query: {
        /** The workspace or organization ID to filter users on. */
        workspace?: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/users/{user_gid}": {
    /**
     * Returns the full user record for the single user with the provided ID.
     * Results are sorted by user ID.
     */
    get: operations["getUser"];
    parameters: {
      path: {
        /** An identifier for the user. Can be one of an email address, the globally unique identifier for the user, or the keyword `me` to indicate the current user making the request. */
        user_gid: number | "me" | string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces/{workspace_gid}/users": {
    /**
     * Returns the user records for all users in the specified workspace or organization.
     * Results are sorted alphabetically by user names.
     */
    get: operations["getUsersInWorkspace"];
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/webhooks": {
    /** Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace. */
    get: operations["getWebhooks"];
    /**
     * Establishing a webhook is a two-part process. First, a simple HTTP POST
     * similar to any other resource creation. Since you could have multiple
     * webhooks we recommend specifying a unique local id for each target.
     *
     * Next comes the confirmation handshake. When a webhook is created, we will
     * send a test POST to the target with an `X-Hook-Secret` header as
     * described in the [Resthooks Security
     * documentation](http://resthooks.org/docs/security/). The target must
     * respond with a `200 OK` and a matching `X-Hook-Secret` header to confirm
     * that this webhook subscription is indeed expected.
     *
     * If you do not acknowledge the webhook’s confirmation handshake it will
     * fail to setup, and you will receive an error in response to your attempt
     * to create it. This means you need to be able to receive and complete the
     * webhook *while* the POST request is in-flight.
     *
     * ```
     * # Request
     * curl -H "Authorization: Bearer <personal_access_token>" \
     * -X POST https://app.asana.com/api/1.0/webhooks \
     * -d "resource=8675309" \
     * -d "target=https://example.com/receive-webhook/7654"
     * ```
     *
     * ```
     * # Handshake sent to https://example.com/
     * POST /receive-webhook/7654
     * X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
     * ```
     *
     * ```
     * # Handshake response sent by example.com
     * HTTP/1.1 200
     * X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
     * ```
     *
     * ```
     * # Response
     * HTTP/1.1 201
     * {
     *   "data": {
     *     "id": 43214,
     *     "resource": {
     *       "id": 8675309,
     *       "name": "Bugs"
     *     },
     *     "target": "https://example.com/receive-webhook/7654",
     *     "active": false,
     *     "last_success_at": null,
     *     "last_failure_at": null,
     *     "last_failure_content": null
     *   }
     * }
     * ```
     */
    post: operations["createWebhook"];
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/webhooks/{webhook_gid}": {
    /** Returns the full record for the given webhook. */
    get: operations["getWebhook"];
    /** This method **permanently** removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued. */
    delete: operations["deleteWebhook"];
    parameters: {
      path: {
        /** The webhook to affect with the current operation. */
        webhook_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces": {
    /** Returns the compact records for all workspaces visible to the authorized user. */
    get: operations["getAllWorkspaces"];
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces/{workspace_gid}": {
    /** Returns the full workspace record for a single workspace. */
    get: operations["getWorkspace"];
    /**
     * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged.
     * Currently the only field that can be modified for a workspace is its name.
     * Returns the complete, updated workspace record.
     */
    put: operations["updateWorkspace"];
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces/{workspace_gid}/addUser": {
    /**
     * Add a user to a workspace or organization.
     * The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
     */
    post: operations["addUserToWorkspace"];
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
  "/workspaces/{workspace_gid}/removeUser": {
    /**
     * Remove a user from a workspace or organization.
     * The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address.
     * Returns an empty data record.
     */
    post: operations["removeUserToWorkspace"];
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
  };
}

export interface components {
  schemas: {
    /** @description A generic Asana Object, containing a globally unique identifier. */
    AsanaObject: {
      /**
       * @description Globally unique ID of the attachment. **Note: This field is under active migration to the gid field—please see our blog post for more information.**
       *
       * @example 12345
       */
      id?: number;
      /**
       * @description Globally unique ID of the object.
       * @example 12345
       */
      gid?: number;
      /**
       * @description The resource type of this resource.
       * @example task
       */
      resource_type?: string;
    };
    AsanaNamedObject: components["schemas"]["AsanaObject"] & {
      [key: string]: unknown;
    } & {
      /**
       * @description The name of the object.
       * @example Bug Task
       */
      name?: string;
    };
    /** @description A generic list of objects, such as those returned by the typeahead search endpoint. */
    AsanaObjectArray: {
      data?: components["schemas"]["AsanaNamedObject"][];
    };
    AsanaSubtype: {
      /**
       * @description The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
       * @example section
       */
      resource_subtype?: string;
    };
    AsanaCreatedAt: {
      /**
       * Format: date-time
       * @description The time at which this resource was created.
       * @example 2012-02-22T02:06:58.147Z
       */
      created_at?: string;
    };
    AsanaCreatedByAndAt: components["schemas"]["AsanaCreatedAt"] & {
      /** @description The user who created this resource. */
      created_by?: components["schemas"]["User"] | null;
    };
    /** @description An *attachment* object represents any file attached to a task in Asana, whether it’s an uploaded file or one associated via a third-party service such as Dropbox or Google Drive. */
    Attachment: components["schemas"]["AsanaObject"] &
      components["schemas"]["AsanaCreatedAt"] & {
        /**
         * Format: uri
         * @description The URL containing the content of the attachment.
         * **Note:** May be null if the attachment is hosted by [Box](https://www.box.com/). If present, this URL may only be valid for 1 hour from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.
         * @example https://www.dropbox.com/s/123/Screenshot.png?dl=1
         */
        download_url?: string | null;
        /**
         * @description The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive` and `box`.
         * @example dropbox
         */
        host?: string;
        /**
         * @description The name of the file.
         * @example Screenshot.png
         */
        name?: string;
        /** @description The task this attachment is attached to. */
        parent?: components["schemas"]["TaskCompact"];
        /**
         * @description The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.
         * @example https://www.dropbox.com/s/123/Screenshot.png
         */
        view_url?: string | null;
      };
    AttachmentObject: {
      data?: components["schemas"]["Attachment"];
    };
    AttachmentArray: {
      data?: components["schemas"]["Attachment"][];
    };
    /** @description A request object for use in a batch request. */
    BatchRequest: {
      /**
       * @description The path of the desired endpoint relative to the API’s base URL. Query parameters are not accepted here; put them in `data` instead.
       * @example /tasks/123
       */
      relative_path: string;
      /**
       * @description The HTTP method you wish to emulate for the action.
       * @example get
       * @enum {string}
       */
      method: "get" | "post" | "put" | "delete" | "patch" | "head";
      /**
       * @description For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body.
       * @example {
       *   "assignee": "me",
       *   "workspace": 1337
       * }
       */
      data?: { [key: string]: unknown };
      /**
       * @description Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. “Pretty” JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request.
       * @example {
       *   "limit": 3,
       *   "fields": [
       *     "name",
       *     "notes",
       *     "completed"
       *   ]
       * }
       */
      options?: {
        /**
         * @description Pagination limit for the request.
         * @example 50
         */
        limit?: number;
        /**
         * @description Pagination offset for the request.
         * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
         */
        offset?: number;
        /**
         * @description The fields to retrieve in the request.
         * @example [
         *   "name",
         *   "id",
         *   "notes",
         *   "completed"
         * ]
         */
        fields?: string[];
        /**
         * @description The expansion path for the request.
         * @example .subtasks
         */
        expand?: string;
      };
    };
    /** @description A response object returned from a batch request. */
    BatchResponse: {
      /**
       * @description The HTTP status code that the invoked endpoint returned.
       * @example 200
       */
      status_code?: number;
      /**
       * @description A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.
       * @example {
       *   "location": "/tasks/1234"
       * }
       */
      headers?: { [key: string]: unknown };
      /**
       * @description The JSON body that the invoked endpoint returned.
       * @example {
       *   "data": {
       *     "id": 1967,
       *     "completed": false,
       *     "name": "Hello, world!",
       *     "notes": "How are you today?"
       *   }
       * }
       */
      body?: { [key: string]: unknown };
    };
    /**
     * @description Custom Fields store the metadata that is used in order to
     * add user-specified information to tasks in Asana. Be sure
     * to reference the [Custom Fields]
     * (https://asana.com/developers/documentation/getting-started/custom-fields)
     * developer documentation for more information about how custom fields
     * relate to various resources in Asana.
     *
     * Users in Asana can [lock custom fields]
     * (https://asana.com/guide/help/premium/custom-fields#gl-lock-fields),
     * which will make them read-only when accessed by other users.
     * Attempting to edit a locked custom field will return HTTP error code
     * `403 Forbidden`.
     */
    CustomField: components["schemas"]["AsanaNamedObject"] &
      components["schemas"]["AsanaSubtype"] & {
        /**
         * @description The description of the custom field.
         * @example Development team priority
         */
        description?: string;
        /**
         * @description **Deprecated: new integrations should prefer the resource_subtype field.** The type of the custom field. Must be one of the given values.
         *
         * @enum {string}
         */
        type?: "text" | "enum" | "number";
        /** @description Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](https://asana.com/developers/api-reference/custom_fields#enum-options). */
        enum_options?: components["schemas"]["EnumOption"][];
        /**
         * @description Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
         * @example 2
         */
        precision?: number;
      };
    CustomFieldObject: {
      data?: components["schemas"]["CustomField"];
    };
    CustomFieldArray: {
      data?: components["schemas"]["CustomField"][];
    };
    /** @description Custom fields are attached to a particular project with the Custom Field Settings resource. This resource both represents the many-to-many join of the Custom Field and Project as well as stores information that is relevant to that particular pairing; for instance, the `is_important` property determines some possible application-specific handling of that custom field. */
    CustomFieldSettings: components["schemas"]["AsanaObject"] &
      components["schemas"]["AsanaCreatedAt"] & {
        /**
         * @description `is_important` is used in the Asana web application to determine if this custom field is displayed in the task list (left pane) of a project. A project can have a maximum of 5 custom field settings marked as `is_important`.
         * @example false
         */
        is_important?: boolean;
        /** @description The parent to which the custom field is applied. This can be a project or portfolio and indicates that the tasks or projects that the parent contains may be given custom field values for this custom field. */
        parent?: components["schemas"]["ProjectCompact"];
        /** @description **Deprecated: new integrations should prefer the `parent` field.** The id of the project that this custom field settings refers to. */
        project?: components["schemas"]["ProjectCompact"];
        /** @description The custom field that is applied to the `parent`. */
        custom_field?: components["schemas"]["CustomField"];
      };
    CustomFieldSettingsArray: {
      data?: components["schemas"]["CustomFieldSettings"][];
    };
    /**
     * @description A set of task dependencies.
     * @example {
     *   "data": {
     *     "dependencies": [
     *       133713,
     *       184253
     *     ]
     *   }
     * }
     */
    DependencyArray: {
      data?: {
        /** @description An array of task IDs that a task should depend on. */
        dependencies?: number[];
      };
    };
    /**
     * @description A set of dependent tasks.
     * @example {
     *   "data": {
     *     "dependents": [
     *       133713,
     *       184253
     *     ]
     *   }
     * }
     */
    DependentArray: {
      data?: {
        /** @description An array of task IDs that are dependents of the given task. */
        dependents?: number[];
      };
    };
    /** @description An empty object. */
    EmptyObject: {
      data?: { [key: string]: unknown };
    };
    /**
     * @description Enum options are the possible values which an enum custom field can
     * adopt. An enum custom field must contain at least 1 enum option but no
     * more than 50.
     *
     * You can add enum options to a custom field by using the `POST
     * /custom_fields/custom_field_gid/enum_options` endpoint.
     *
     * **It is not possible to remove or delete an enum option**. Instead, enum
     * options can be disabled by updating the `enabled` field to false with the
     * `PUT /enum_options/enum_option_gid` endpoint. Other attributes can be
     * updated similarly.
     *
     * On creation of an enum option, `enabled` is always set to `true`, meaning
     * the enum option is a selectable value for the custom field. Setting
     * `enabled=false` is equivalent to “trashing” the enum option in the Asana
     * web app within the “Edit Fields” dialog. The enum option will no longer
     * be selectable but, if the enum option value was previously set within a
     * task, the task will retain the value.
     *
     * Enum options are an ordered list and by default new enum options are
     * inserted at the end. Ordering in relation to existing enum options can be
     * specified on creation by using `insert_before` or `insert_after` to
     * reference an existing enum option. Only one of `insert_before` and
     * `insert_after` can be provided when creating a new enum option.
     *
     * An enum options list can be reordered with the `POST
     * /custom_fields/custom_field_gid/enum_options/insert` endpoint.
     */
    EnumOption: components["schemas"]["AsanaObject"] & {
      /**
       * @description The name of the enum option.
       * @example Low
       */
      name?: string;
      /**
       * @description The color of the enum option. Defaults to ‘none’.
       * @example true
       */
      enabled?: boolean;
      /**
       * @description Whether or not the enum option is a selectable value for the custom field.
       * @example blue
       */
      color?: string;
    };
    /**
     * @description Sadly, sometimes requests to the API are not successful. Failures can
     * occur for a wide range of reasons. In all cases, the API should return
     * an HTTP Status Code that indicates the nature of the failure,
     * with a response body in JSON format containing additional information.
     *
     * In the event of a server error the response body will contain an error
     * phrase. These phrases are automatically generated using the
     * [node-asana-phrase
     * library](https://github.com/Asana/node-asana-phrase) and can be used by
     * Asana support to quickly look up the incident that caused the server
     * error.
     */
    Error: {
      errors?: {
        /**
         * @description Message providing more detail about the error that occurred, if available.
         * @example project: Missing input
         */
        message?: string;
        /**
         * @description **500 errors only**. A unique error phrase which can be used when contacting developer support to help identify the exact occurrence of the problem in Asana’s logs.
         * @example 6 sad squid snuggle softly
         */
        phrase?: string;
      }[];
    };
    /**
     * @description An *event* is an object representing a change to a resource that was
     * observed by an event subscription.
     *
     * In general, requesting events on a resource is faster and subject to
     * higher rate limits than requesting the resource itself. Additionally,
     * change events bubble up - listening to events on a project would include
     * when stories are added to tasks in the project, even on subtasks.
     *
     * Establish an initial sync token by making a request with no sync token.
     * The response will be a `412` error - the same as if the sync token had
     * expired.
     *
     * Subsequent requests should always provide the sync token from the
     * immediately preceding call.
     *
     * Sync tokens may not be valid if you attempt to go ‘backward’ in the
     * history by requesting previous tokens, though re-requesting the current
     * sync token is generally safe, and will always return the same results.
     *
     * When you receive a `412 Precondition Failed` error, it means that the
     * sync token is either invalid or expired. If you are attempting to keep a
     * set of data in sync, this signals you may need to re-crawl the data.
     *
     * Sync tokens always expire after 24 hours, but may expire sooner,
     * depending on load on the service.
     */
    Event: {
      /**
       * @description The user who triggered the event.
       *
       * **Note**: The event may be triggered by a different user than the
       * subscriber. For example, if user A subscribes to a task and user B
       * modified it, the event’s user will be user B. Note: Some events are
       * generated by the system, and will have `null` as the user. API
       * consumers should make sure to handle this case.
       */
      user?: components["schemas"]["UserCompact"] | null;
      /**
       * @description The resource the event occurred on.
       *
       * **Note**: The resource that triggered the event may be different from
       * the one that the events were requested for. For example, a
       * subscription to a project will contain events for tasks contained
       * within the project.
       */
      resource?: {
        /** @example 12345 */
        id?: number;
        /** @example Bug Task */
        name?: string;
      };
      /**
       * @description **Deprecated: Refer to the resource_type of the parent.**
       * The type of the resource that generated the event.
       *
       * **Note**: Currently, only tasks, projects and stories generate
       * events.
       * @example task
       */
      type?: string;
      /**
       * @description The type of action taken that triggered the event.
       * @example changed
       */
      action?: string;
      /** @description For added/removed events, the parent that resource was added to or removed from. The parent will be `null` for other event types. */
      parent?: components["schemas"]["AsanaNamedObject"] | null;
      /**
       * Format: date-time
       * @description The timestamp when the event occurred.
       * @example 2012-02-22T02:06:58.147Z
       */
      created_at?: string;
    };
    /** @description The full record for all events that have occurred since the sync token was created. */
    EventArray: {
      data?: components["schemas"]["Event"][];
      /**
       * @description A sync token to be used with the next call to the events endpoint.
       * @example de4774f6915eae04714ca93bb2f5ee81
       */
      sync?: string;
    };
    /**
     * @description An *organization_export* object represents a request to export the
     * complete data of an Organization in JSON format.
     *
     * To export an Organization using this API:
     *
     * * Create an `organization_export`
     *   [request](https://asana.com/developers/api-reference/organization_exports#create)
     *   and store the id that is returned.
     * * Request the `organization_export` every few minutes, until the `state`
     *   field contains ‘finished’.
     * * Download the file located at the URL in the `download_url` field.
     * * Exports can take a long time, from several minutes to a few hours for
     *   large Organizations.
     *
     * **Note**: These endpoints are only available to [Service
     * Accounts](https://asana.com/guide/help/premium/service-accounts) of an
     * [Enterprise](https://asana.com/enterprise) Organization.
     */
    OrganizationExport: components["schemas"]["AsanaObject"] &
      components["schemas"]["AsanaCreatedAt"] & {
        /**
         * Format: uri
         * @description Download this URL to retreive the full export of the organization
         * in JSON format. It will be compressed in a gzip (.gz) container.
         *
         * **Note**: May be null if the export is still in progress or
         * failed.  If present, this URL may only be valid for 1 hour from
         * the time of retrieval. You should avoid persisting this URL
         * somewhere and rather refresh on demand to ensure you do not keep
         * stale URLs.
         * @example https://asana-export.s3.amazonaws.com/export-4632784536274-20170127-43246.json.gz?AWSAccessKeyId=xxxxxxxx
         */
        download_url?: string | null;
        /**
         * @description The current state of the export.
         * @example started
         * @enum {string}
         */
        state?: "pending" | "started" | "finished" | "error";
        /** @description **Create-only**: The Organization that is being exported. This can only be specified at create time. */
        organization?: {
          /** @example 14916 */
          id?: number;
          /** @example 14916 */
          gid?: string;
          /** @example My Workspace */
          name?: string;
        };
      };
    OrganizationExportObjectResponse: {
      data?: components["schemas"]["OrganizationExport"];
    };
    /**
     * @description A *portfolio* gives a high-level overview of the status of multiple
     * initiatives in Asana. Portfolios provide a dashboard overview of
     * the state of multiple projects, including a progress report and the
     * most recent [project status](https://asana.com/developers/api-reference/project_statuses)
     * update.
     */
    Portfolio: components["schemas"]["AsanaNamedObject"] &
      components["schemas"]["AsanaCreatedAt"] & {
        /**
         * @description Color of the portfolio.
         * @example light-green
         * @enum {string}
         */
        color?:
          | "dark-pink"
          | "dark-green"
          | "dark-blue"
          | "dark-red"
          | "dark-teal"
          | "dark-brown"
          | "dark-orange"
          | "dark-purple"
          | "dark-warm-gray"
          | "light-pink"
          | "light-green"
          | "light-blue"
          | "light-red"
          | "light-teal"
          | "light-brown"
          | "light-orange"
          | "light-purple"
          | "light-warm-gray";
        /** @description Array of custom field settings applied to the portfolio. */
        custom_field_settings?: components["schemas"]["CustomFieldSettings"][];
        /** @description The current owner of the portfolio. */
        owner?: components["schemas"]["UserCompact"];
        /** @description **Create-only**. The workspace or organization that the portfolio belongs to. */
        workspace?: components["schemas"]["WorkspaceCompact"];
      };
    PortfolioObject: {
      data?: components["schemas"]["Portfolio"];
    };
    PortfolioArray: {
      data?: components["schemas"]["Portfolio"][];
    };
    /**
     * @description A *project* represents a prioritized list of tasks in Asana or a board
     * with columns of tasks represented as cards. It exists in a single
     * workspace or organization and is accessible to a subset of users in that
     * workspace or organization, depending on its permissions.
     *
     * Projects in organizations are shared with a single team. You cannot
     * currently change the team of a project via the API. Non-organization
     * workspaces do not have teams and so you should not specify the team of
     * project in a regular workspace.
     *
     * Followers of a project are a subset of the members of that project.
     * Followers of a project will receive all updates including tasks created,
     * added and removed from that project. Members of the project have access
     * to and will receive status updates of the project. Adding followers to a
     * project will add them as members if they are not already, removing
     * followers from a project will not affect membership.
     */
    Project: components["schemas"]["AsanaObject"] &
      components["schemas"]["AsanaCreatedAt"] & {
        /**
         * @description Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
         * @example Stuff to buy
         */
        name?: string;
        /**
         * @description True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
         * @example false
         */
        archived?: boolean;
        /**
         * @description Color of the project.
         * @example light-green
         * @enum {string}
         */
        color?:
          | "dark-pink"
          | "dark-green"
          | "dark-blue"
          | "dark-red"
          | "dark-teal"
          | "dark-brown"
          | "dark-orange"
          | "dark-purple"
          | "dark-warm-gray"
          | "light-pink"
          | "light-green"
          | "light-blue"
          | "light-red"
          | "light-teal"
          | "light-brown"
          | "light-orange"
          | "light-purple"
          | "light-warm-gray";
        /**
         * @description The most recently created status update for the project, or `null` if no update exists. See also the documentation for [project status updates](/developers/api-reference/project_statuses).
         * @example {
         *   "color": "green",
         *   "text": "Everything is great",
         *   "author": {
         *     "id": 12345,
         *     "name": "Greg Bizarro"
         *   }
         * }
         */
        current_status?: {
          /**
           * @example green
           * @enum {string}
           */
          color?: "green" | "yellow" | "red";
          /** @example All gravy! */
          text?: string;
          author?: components["schemas"]["User"];
        } | null;
        /** @description Array of Custom Field Settings (in compact form). */
        custom_field_settings?: components["schemas"]["CustomFieldSettings"][];
        /**
         * Format: date-time
         * @description The day on which this project is due. This takes a date with format YYYY-MM-DD.
         * @example 2012-03-26
         */
        due_date?: string;
        /** @description Array of users following this project. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product. */
        followers?: components["schemas"]["User"][];
        /**
         * @description The notes of the project with formatting as HTML.
         * **Note: This field is under active migration—please see our [blog post] (https://asana.com/developers/news/new-rich-text) for more information.**
         * @example These are things we need to purchase.
         */
        html_notes?: string;
        /**
         * @description The layout (board or list view) of a project
         * @enum {string}
         */
        layout?: "list" | "board";
        /** @description Array of users who are members of this project. */
        members?: components["schemas"]["User"][];
        /**
         * Format: date-time
         * @description The time at which this project was last modified.
         * **Note**: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.
         * @example 2012-02-22T02:06:58.147Z
         */
        modified_at?: string;
        /**
         * @description More detailed, free-form textual information associated with the project.
         * @example These are things we need to purchase.
         */
        notes?: string;
        /** @description The current owner of the project, may be null. */
        owner?: components["schemas"]["UserCompact"] | null;
        /**
         * @description True if the project is public to the organization. If false, do not share this project with other users in this organization without explicitly checking to see if they have access.
         * @example false
         */
        public?: boolean;
        /**
         * Format: date
         * @description The day on which this project starts. This takes a date with format YYYY-MM-DD.
         * @example 2012-02-22
         */
        start_on?: string;
        /** @description **Create-only**. The team that this project is shared with. This field only exists for projects in organizations. */
        team?: components["schemas"]["TeamCompact"];
        /** @description **Create-only**. The workspace or organization this project is associated with. Once created, projects cannot be moved to a different workspace. This attribute can only be specified at creation time. */
        workspace?: components["schemas"]["WorkspaceCompact"];
      };
    ProjectCompact: components["schemas"]["AsanaNamedObject"] & {
      /** @example project */
      resource_type?: string;
    };
    ProjectObject: {
      data?: components["schemas"]["Project"];
    };
    ProjectArray: {
      data?: components["schemas"]["Project"][];
    };
    /** @description With the introduction of “comment-only” projects in Asana, a user’s membership in a project comes with associated permissions. These permissions (whether a user has full access to the project or comment-only access) are accessible through the project memberships endpoints described here. */
    ProjectMembership: components["schemas"]["AsanaObject"] & {
      user?: components["schemas"]["UserCompact"];
      project?: components["schemas"]["ProjectCompact"];
      /**
       * @description Whether the user has full access to the project or has comment-only access.
       * @example full_write
       * @enum {string}
       */
      write_access?: "full_write" | "comment_only";
    };
    ProjectMembershipObject: {
      data?: components["schemas"]["ProjectMembership"];
    };
    ProjectMembershipArray: {
      data?: components["schemas"]["ProjectMembership"][];
    };
    /**
     * @description A *project status* is an update on the progress of a particular project, and is sent out to all project followers when created. These updates include both text describing the update and a color code intended to represent the overall state of the project: "green" for projects that are on track, "yellow" for projects at risk, and "red" for projects that are behind.
     * Project statuses can be created and deleted, but not modified.
     */
    ProjectStatus: components["schemas"]["AsanaNamedObject"] &
      components["schemas"]["AsanaCreatedByAndAt"] & {
        /**
         * @description The title of the project status update.
         * @example Status Update - Jun 15
         */
        title?: string;
        /**
         * @description The text content of the status update.
         * @example The project is moving forward according to plan...
         */
        text?: string;
        /**
         * @description The color associated with the status update.
         * @enum {string}
         */
        color?: "green" | "yellow" | "red";
      };
    ProjectStatusObject: {
      data?: components["schemas"]["ProjectStatus"];
    };
    ProjectStatusArray: {
      data?: components["schemas"]["ProjectStatus"][];
    };
    /**
     * @description A *section* is a subdivision of a project that groups tasks together. It
     * can either be a header above a list of tasks in a list view or a column
     * in a board view of a project.
     *
     * Sections are largely a shared idiom in Asana’s API for both list and
     * board views of a project regardless of the project’s layout.
     *
     * The ‘memberships’ property when [getting a
     * task](https://asana.com/developers/api-reference/tasks#get) will return
     * the information for the section or the column under ‘section’ in the
     * response.
     */
    Section: components["schemas"]["AsanaObject"] &
      components["schemas"]["AsanaCreatedAt"] & {
        /**
         * @description The name of the section (i.e. the text displayed as the section header).
         * @example Next Actions
         */
        name?: string;
        /** @description The project which contains the section. */
        project?: components["schemas"]["ProjectCompact"];
      };
    SectionCompact: components["schemas"]["AsanaNamedObject"];
    SectionObject: {
      data?: components["schemas"]["Section"];
    };
    SectionArray: {
      data?: components["schemas"]["Section"][];
    };
    /**
     * @description A *story* represents an activity associated with an object in the Asana
     * system. Stories are generated by the system whenever users take actions
     * such as creating or assigning tasks, or moving tasks between projects.
     * *Comments* are also a form of user-generated story.
     */
    Story: components["schemas"]["AsanaObject"] &
      components["schemas"]["AsanaSubtype"] &
      components["schemas"]["AsanaCreatedByAndAt"] & {
        /**
         * @description HTML formatted text for a comment. This will not include the name
         * of the creator.
         *
         * **Note: This field is under active migration—please see our blog
         * post for more information.**
         * @example Get whatever Sashimi has.
         */
        html_text?: string;
        /**
         * @description Whether the text of the story has been edited after creation.
         * @example false
         */
        is_edited?: boolean;
        /**
         * @description Whether the story should be pinned on the resource.
         * @example false
         */
        is_pinned?: boolean;
        /**
         * @description True if the story is liked by the authorized user, false if not.
         *
         * **Note**: This property only exists for stories that provide
         * likes.
         * @example false
         */
        liked?: boolean;
        /**
         * @description Array of users who have liked this story.
         *
         * **Note**: This property only exists for stories that provide
         * likes.
         */
        likes?: components["schemas"]["User"][];
        /**
         * @description The number of users who have liked this story.
         *
         * **Note**: This property only exists for stories that provide
         * likes.
         * @example 5
         */
        num_likes?: number;
        /**
         * @description The component of the Asana product the user used to trigger the story.
         * @example web
         */
        source?: string;
        /** @description The object this story is associated with. Currently may only be a task. */
        target?: {
          /** @example 1234 */
          id?: number;
          /** @example Bug Task */
          name?: string;
        };
        /**
         * @description **Create-only**. Human-readable text for the story or comment.
         * This will not include the name of the creator.
         *
         * **Note:** This is not guaranteed to be stable for a given type of
         * story. For example, text for a reassignment may not always say
         * “assigned to …” as the text for a story can both be edited and
         * change based on the language settings of the user making the request.
         * Use the `resource_subtype` property to discover the action that
         * created the story.
         * @example marked today
         */
        text?: unknown;
        /**
         * @description **Deprecated: new integrations should prefer the `resource_subtype` field.** The type of this story. For more fine-grained inspection of story types, see the [`resource_subtype`] (https://asana.com/developers/api-reference/stories#field-resource_subtype) property.
         *
         * @example comment
         */
        type?: string;
      };
    StoryObject: {
      data?: components["schemas"]["Story"];
    };
    StoryArray: {
      data?: components["schemas"]["Story"][];
    };
    /**
     * @description A *tag* is a label that can be attached to any task in Asana. It exists
     * in a single workspace or organization.
     *
     * Tags have some metadata associated with them, but it is possible that we
     * will simplify them in the future so it is not encouraged to rely too
     * heavily on it. Unlike projects, tags do not provide any ordering on the
     * tasks they are associated with.
     */
    Tag: components["schemas"]["AsanaObject"] &
      components["schemas"]["AsanaCreatedAt"] & {
        /** @description Array of users following this tag. */
        followers?: components["schemas"]["User"][];
        /**
         * @description Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
         * @example Stuff to buy
         */
        name?: string;
        /**
         * @description Color of the tag.
         * @example light-green
         * @enum {string}
         */
        color?:
          | "dark-pink"
          | "dark-green"
          | "dark-blue"
          | "dark-red"
          | "dark-teal"
          | "dark-brown"
          | "dark-orange"
          | "dark-purple"
          | "dark-warm-gray"
          | "light-pink"
          | "light-green"
          | "light-blue"
          | "light-red"
          | "light-teal"
          | "light-brown"
          | "light-orange"
          | "light-purple"
          | "light-warm-gray";
        workspace?: components["schemas"]["WorkspaceCompact"];
      };
    TagObject: {
      data?: components["schemas"]["Tag"];
    };
    TagArray: {
      data?: components["schemas"]["Tag"][];
    };
    /**
     * @description The *task* is the basic object around which many operations in Asana are
     * centered. In the Asana application, multiple tasks populate the middle
     * pane according to some view parameters, and the set of selected tasks
     * determines the more detailed information presented in the details pane.
     *
     * A *section*, at its core, is a task whose name ends with the colon
     * character `:`. Sections are unique in that they will be included in the
     * *memberships* field of task objects returned in the API when the task is
     * within a section. They can also be used to manipulate the ordering of a
     * task within a project.
     *
     * [Queries](https://asana.com/developers/api-reference/tasks#query) return
     * a compact representation of each object which is typically the id and
     * name fields. Interested in a specific set of fields or all of the fields?
     * Use [field
     * selectors](https://asana.com/developers/documentation/getting-started/input-output-options)
     * to manipulate what data is included in a response.
     */
    Task: components["schemas"]["AsanaObject"] &
      components["schemas"]["AsanaCreatedAt"] &
      components["schemas"]["AsanaSubtype"] & {
        assignee?: components["schemas"]["User"] | null;
        /**
         * @description Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null.
         * @example upcoming
         * @enum {string}
         */
        assignee_status?: "today" | "upcoming" | "later" | "new";
        /**
         * @description True if the task is currently marked complete, false if not.
         * @example false
         */
        completed?: boolean;
        /**
         * Format: date-time
         * @description The time at which this task was completed, or null if the task is incomplete.
         * @example 2012-02-22T02:06:58.147Z
         */
        completed_at?: string | null;
        /**
         * @description Array of custom fields applied to the task. These custom fields
         * represent the values recorded on this task for a particular
         * custom field. For example, these fields will contain an
         * `enum_value` property for custom fields of type `enum`, a
         * `string_value` property for custom fields of type `string`, and
         * so on. Please note that the `id` returned on each custom field
         * value *is identical* to the `id` of the custom field, which
         * allows referencing the custom field metadata through the
         * `/custom_fields/custom_field_gid` endpoint.
         * @example [
         *   {
         *     "id": 1646,
         *     "gid": "1646",
         *     "name": "Priority",
         *     "type": "enum",
         *     "enum_value": {
         *       "id": 126,
         *       "name": "P1"
         *     }
         *   }
         * ]
         */
        custom_fields?: components["schemas"]["CustomField"][];
        /**
         * @description Array of resources referencing tasks that this task depends on. The objects contain only the ID of the dependency.
         * @example [
         *   {
         *     "id": 1234,
         *     "gid": "1234"
         *   },
         *   {
         *     "id": 4321,
         *     "gid": "4321"
         *   }
         * ]
         */
        dependencies?: {
          /** @example 1234 */
          id?: number;
          /** @example 1234 */
          gid?: string;
        }[];
        /**
         * @description Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
         * @example [
         *   {
         *     "id": 1234,
         *     "gid": "1234"
         *   },
         *   {
         *     "id": 4321,
         *     "gid": "4321"
         *   }
         * ]
         */
        dependents?: {
          /** @example 1234 */
          id?: number;
          /** @example 1234 */
          gid?: string;
        }[];
        /**
         * Format: date
         * @description Date on which this task is due, or null if the task has no due date.  This takes a date with `YYYY-MM-DD` format and should not be used together with due_at.
         * @example 2012-03-26
         */
        due_on?: string | null;
        /**
         * Format: date
         * @description Date and time on which this task is due, or null if the task has no due time. This takes a UTC timestamp and should not be used together with `due_on`.
         * @example 2012-02-22T02:06:58.147Z
         */
        due_at?: string | null;
        /**
         * @description **OAuth Required**. The external field allows you to store app-specific metadata on tasks, including an id that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external id is set, you can use the notation `external:custom_id` to reference your object anywhere in the API where you may use the original object id. See the page on Custom External Data for more details.
         * @example {
         *   "id": "my_id",
         *   "data": "A blob of information"
         * }
         */
        external?: {
          /** @example my_id */
          id?: number;
          /** @example A blob of information. */
          data?: string;
        };
        /**
         * @description Array of users following this task.
         * @example [
         *   {
         *     "id": 1234,
         *     "name": "Mittens"
         *   }
         * ]
         */
        followers?: components["schemas"]["UserCompact"][];
        /**
         * @description The notes of the text with formatting as HTML.
         * **Note: This field is under active migration—please see our blog post for more information.**
         * @example <body>Mittens <em>really</em> likes the stuff from Humboldt.</body>
         */
        html_notes?: string;
        /**
         * @description True if the task is liked by the authorized user, false if not.
         * @example true
         */
        liked?: boolean;
        /**
         * @description Array of users who have liked this task.
         * @example [
         *   {
         *     "id": 1234,
         *     "name": "Mittens"
         *   }
         * ]
         */
        likes?: components["schemas"]["UserCompact"][];
        /**
         * @description **Create-only**. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.
         * @example [
         *   {
         *     "project": {
         *       "id": 1331,
         *       "gid": "1331",
         *       "name": "Bugs"
         *     },
         *     "section": {
         *       "id": 1123,
         *       "gid": "1123",
         *       "name": "P1:"
         *     }
         *   }
         * ]
         */
        memberships?: {
          project?: components["schemas"]["ProjectCompact"];
          section?: components["schemas"]["SectionCompact"];
        }[];
        /**
         * Format: date-time
         * @description The time at which this task was last modified.
         *
         * **Note:** This does not currently reflect any changes in
         * associations such as projects or comments that may have been
         * added or removed from the task.
         * @example 2012-02-22T02:06:58.147Z
         */
        modified_at?: string;
        /**
         * @description Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
         * @example Buy catnip
         */
        name?: string;
        /**
         * @description More detailed, free-form textual information associated with the task.
         * @example Mittens really likes the stuff from Humboldt.
         */
        notes?: string;
        /**
         * @description The number of users who have liked this task.
         * @example 5
         */
        num_likes?: number;
        /**
         * @description [Opt In](https://asana.com/developers/documentation/getting-started/input-output-options). The number of subtasks on this task.
         *
         * @example 3
         */
        num_subtasks?: number;
        /**
         * @description **Create-only.** Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.
         * @example [
         *   {
         *     "id": 1331,
         *     "gid": "1331",
         *     "name": "Stuff to buy"
         *   }
         * ]
         */
        projects?: components["schemas"]["ProjectCompact"][];
        /** @description The parent of this task, or `null` if this is not a subtask. This property cannot be modified using a PUT request but you can change it with the `setParent` endpoint. You can create subtasks by using the subtasks endpoint. */
        parent?: components["schemas"]["TaskCompact"] | null;
        /**
         * Format: date
         * @description Date on which this task is due, or null if the task has no start
         * date. This field takes a date with `YYYY-MM-DD` format.
         *
         * **Note:** `due_on` or `due_at` must be present in the request when
         * setting or unsetting the `start_on` parameter.
         * @example 2012-03-26
         */
        start_on?: string | null;
        /**
         * @description **Create-only**. Array of tags associated with this task. This property may be specified on creation using just an array of tag IDs.  In order to change tags on an existing task use `addTag` and `removeTag`.
         * @example [
         *   {
         *     "id": 59746,
         *     "gid": "59746",
         *     "name": "Grade A"
         *   }
         * ]
         */
        tags?: components["schemas"]["Tag"][];
        /** @description *Create-only*. The workspace this task is associated with. Once created, task cannot be moved to a different workspace. This attribute can only be specified at creation time. */
        workspace?: components["schemas"]["WorkspaceCompact"];
      };
    TaskCompact: components["schemas"]["AsanaNamedObject"];
    TaskObject: {
      data?: components["schemas"]["Task"];
    };
    TaskArray: {
      data?: components["schemas"]["Task"][];
    };
    /**
     * @description A *team* is used to group related projects and people together within an
     * organization. Each project in an organization is associated with a team.
     */
    Team: components["schemas"]["AsanaNamedObject"] & {
      /**
       * @description The description of the team.
       * @example All developers should be members of this team.
       */
      description?: string;
      /**
       * @description The description of the team with formatting as HTML.
       * **Note: This field is under active migration—please see our [blog post](https://asana.com/developers/news/new-rich-text) for more information.**
       *
       * @example <body><em>All</em> developers should be members of this team.</body>
       */
      html_description?: string;
    };
    TeamCompact: components["schemas"]["AsanaNamedObject"];
    TeamObject: {
      data?: components["schemas"]["Team"];
    };
    TeamArray: {
      data?: components["schemas"]["Team"][];
    };
    /**
     * @description A *user* object represents an account in Asana that can be given access
     * to various workspaces, projects, and tasks.
     *
     * Like other objects in the system, users are referred to by numerical
     * IDs. However, the special string identifier `me` can be used anywhere a
     * user ID is accepted, to refer to the current authenticated user.
     */
    User: components["schemas"]["AsanaObject"] & {
      /**
       * Format: email
       * @description The user’s email address.
       * @example gsanchez@example.com
       */
      email?: string;
      /**
       * @description **Read-only except when same user as requester**. The user’s name.
       * @example Greg Sanchez
       */
      name?: string;
      /**
       * @description A map of the user’s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, and 128. Images are in PNG format.
       * @example {
       *   "image_21x21": "https://...",
       *   "image_27x27": "https://...",
       *   "image_36x36": "https://...",
       *   "image_60x60": "https://...",
       *   "image_128x128": "https://..."
       * }
       */
      photo?: {
        /** Format: uri */
        image_21x21?: string;
        /** Format: uri */
        image_27x27?: string;
        /** Format: uri */
        image_36x36?: string;
        /** Format: uri */
        image_60x60?: string;
        /** Format: uri */
        image_128x128?: string;
      } | null;
      /**
       * @description Workspaces and organizations this user may access.
       * Note\: The API will only return workspaces and organizations that also contain the authenticated user.
       */
      workspaces?: components["schemas"]["Workspace"][];
    };
    UserCompact: components["schemas"]["AsanaObject"];
    UserObject: {
      data?: components["schemas"]["User"];
    };
    UserArray: {
      data?: components["schemas"]["User"][];
    };
    /** @description A user ID object for specification with the addUser/removeUser endpoints. */
    UserIdObject: {
      data?: {
        /** @example 12345 */
        user?: number | "me" | string;
      };
    };
    /**
     * @description A user task list represents the tasks assigned to a particular user. It provides API access to a user’s “My Tasks” view in Asana.
     * A user’s “My Tasks” represent all of the tasks assigned to that user. It is visually divided into regions based on the task’s [`assignee_status`] (https://asana.com/developers/api-reference/tasks#field-assignee_status) for Asana users to triage their tasks based on when they can address them. When building an integration it’s worth noting that tasks with due dates will automatically move through `assignee_status` states as their due dates approach; read up on [task auto-promotion](https://asana.com/guide/help/fundamentals/my-tasks#gl-auto-promote) for more information.
     */
    UserTaskList: components["schemas"]["AsanaNamedObject"] & {
      /** @description The owner of the user task list, i.e. the person whose My Tasks is represented by this resource. */
      owner?: components["schemas"]["UserCompact"];
      /** @description The workspace in which the user task list is located. */
      workspace?: components["schemas"]["WorkspaceCompact"];
    };
    UserTaskListObject: {
      data?: components["schemas"]["UserTaskList"];
    };
    /**
     * @description Webhooks allow an application to be notified of changes. This is in
     * addition to the ability to fetch those changes directly as Events - in
     * fact, Webhooks are just a way to receive
     * [Events](https://asana.com/developers/api-reference/events) via HTTP POST
     * at the time they occur instead of polling for them. For services
     * accessible via HTTP this is often vastly more convenient, and if events
     * are not too frequent can be significantly more efficient.
     *
     * In both cases, however, changes are represented as Event objects - refer
     * to the [Events
     * documentation](https://asana.com/developers/api-reference/events) for
     * more information on what data these events contain.
     *
     * **Note**: While Webhooks send arrays of Event objects to their target,
     * the Event objects themselves contain *only IDs*, rather than the actual
     * resource they are referencing. Webhooks themselves contain only the
     * information necessary to deliver the events to the desired target as they
     * are generated.
     */
    Webhook: components["schemas"]["AsanaObject"] &
      components["schemas"]["AsanaCreatedAt"] & {
        /**
         * @description If true, the webhook will send events - if false it is considered inactive and will not generate events.
         * @example false
         */
        active?: boolean;
        /**
         * Format: date-time
         * @description The timestamp when the webhook last received an error when sending an event to the target.
         * @example 2012-02-22T02:06:58.147Z
         */
        last_failure_at?: string;
        /**
         * @description The contents of the last error response sent to the webhook when attempting to deliver events to the target.
         * @example 500 Server Error\n\nCould not complete the request
         */
        last_failure_content?: string;
        /**
         * Format: date-time
         * @description The timestamp when the webhook last successfully sent an event to the target.
         * @example 2012-02-22T02:06:58.147Z
         */
        last_success_at?: string;
        /** @description The resource the webhook is subscribed to. */
        resource?: components["schemas"]["AsanaNamedObject"];
        /**
         * Format: uri
         * @description The URL to receive the HTTP POST.
         * @example https://example.com/receive-webhook/7654
         */
        target?: string;
      };
    WebhookEvent: {
      /**
       * @description The type of action taken that triggered the event.
       * @example changed
       */
      action?: string;
      /**
       * Format: date-time
       * @description The timestamp when the event occurred.
       * @example 2012-02-22T02:06:58.147Z
       */
      created_at?: string;
      /**
       * @description For added/removed events, the parent ID that resource was added to or removed from. The parent will be `null` for other event types.
       * @example 12345
       */
      parent?: number | null;
      /**
       * @description The resource ID the event occurred on.
       *
       * **Note**: The resource that triggered the event may be different from
       * the one that the events were requested for. For example, a
       * subscription to a project will contain events for tasks contained
       * within the project.
       * @example 32154
       */
      resource?: number;
      /**
       * @description The type of the resource that generated the event.
       *
       * **Note**: Currently, only tasks, projects and stories generate
       * events.
       * @example task
       */
      type?: string;
      /**
       * @description The ID of the user who triggered the event.
       *
       * **Note**: The event may be triggered by a different user than the
       * subscriber. For example, if user A subscribes to a task and user B
       * modified it, the event’s user will be user B. Note: Some events are
       * generated by the system, and will have `null` as the user. API
       * consumers should make sure to handle this case.
       * @example 321654987
       */
      user?: number | null;
    };
    WebhookObject: {
      data?: components["schemas"]["Webhook"];
    };
    WebhookArray: {
      data?: components["schemas"]["Webhook"][];
    };
    /**
     * @description A *workspace* is the highest-level organizational unit in Asana. All
     * projects and tasks have an associated workspace.
     *
     * An *organization* is a special kind of workspace that represents a
     * company. In an organization, you can group your projects into teams.
     * You can read more about how organizations work on the Asana Guide. To
     * tell if your workspace is an organization or not, check its
     * `is_organization` property.
     *
     * Over time, we intend to migrate most workspaces into organizations and
     * to release more organization-specific functionality. We may eventually
     * deprecate using workspace-based APIs for organizations. Currently, and
     * until after some reasonable grace period following any further
     * announcements, you can still reference organizations in any `workspace`
     * parameter.
     */
    Workspace: components["schemas"]["AsanaNamedObject"] & {
      /**
       * @description The email domains that are associated with this workspace.
       * @example [
       *   "asana.com"
       * ]
       */
      email_domains?: string[];
      /**
       * @description Whether the workspace is an *organization*.
       * @example false
       */
      is_organization?: boolean;
    };
    WorkspaceCompact: components["schemas"]["AsanaNamedObject"];
    WorkspaceObject: {
      data?: components["schemas"]["Workspace"];
    };
    WorkspaceArray: {
      data?: components["schemas"]["Workspace"][];
    };
  };
  responses: {
    /**
     * Sadly, sometimes requests to the API are not successful. Failures can occur for a wide range of reasons. In all cases, the API should return an HTTP Status Code that indicates the nature of the failure, with a response body in JSON format containing additional information.
     * In the event of a server error the response body will contain an error phrase. These phrases are automatically generated using the [node-asana-phrase library](https://github.com/Asana/node-asana-phrase) and can be used by Asana support to quickly look up the incident that caused the server error.
     */
    GenericErrorResponse: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** A valid authentication token was not provided with the request, so the API could not associate a user with the request. */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** The request was valid, but the queried object or object mutation specified in the request is only available to premium organizations and workspaces. */
    PaymentRequired: unknown;
    /** The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. */
    NotFound: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** You have exceeded one of the enforced rate limits in the API. See the [documentation on rate limiting](https://asana.com/developers/documentation/getting-started/rate-limits) for more information. */
    TooManyRequests: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** There was a problem on Asana’s end. */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    /**
     * @description Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
     * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
     * @example [
     *   "followers"
     * ]
     */
    expand: string[];
    /**
     * @description Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
     * The id of included objects will always be returned, regardless of the field options.
     * @example [
     *   "followers",
     *   "assignee"
     * ]
     */
    fields: string[];
    /** @description Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
    pretty: boolean;
    /**
     * @description The number of objects to return per page. The value must be between 1 and 100.
     * @example 50
     */
    limit: number;
    /**
     * @description An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
     * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
     */
    offset: string;
    /**
     * @description Only return projects whose `archived` field takes on the value of this parameter.
     * @example false
     */
    archived_query_param: boolean;
    /**
     * @description Globally unique identifier for the project.
     * @example 1331
     */
    project_path_gid: string;
    /**
     * @description The globally unique identified for the section.
     * @example 321654
     */
    section_path_gid: string;
    /**
     * @description Globally unique identifier for the tag.
     * @example 11235
     */
    tag_path_gid: string;
    /**
     * @description The task to operate on.
     * @example 321654
     */
    task_path_gid: string;
    /**
     * @description Globally unique identifier for the team.
     * @example 159874
     */
    team_path_gid: string;
    /** @description The user to filter results on. */
    user_query_param: string | "me" | string;
    /**
     * @description Globally unique identifier for the user.
     * @example 12345
     */
    user_path_gid: string;
    /**
     * @description Globally unique identifier for the user task list.
     * @example 12345
     */
    user_task_list_path_gid: string;
    /**
     * @description Globally unique identifier for the workspace or organization.
     * @example 12345
     */
    workspace_path_gid: string;
    /**
     * @description Globally unique identifier for the portfolio.
     * @example 12345
     */
    portfolio_path_gid: string;
  };
}

export interface operations {
  /** Get the full record for a single attachment. */
  getAttachment: {
    parameters: {
      path: {
        /** Globally unique identifier for the attachment. */
        attachment_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the record for a single attachment. */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact records for all attachments on the task. */
  getAttachmentsForTask: {
    parameters: {
      path: {
        /** Globally unique identifier for the task. */
        task_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the compact records for all attachments on the task. */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Upload an attachment.
   *
   * This method uploads an attachment to a task and returns the compact
   * record for the created attachment object. It is not possible to attach
   * files from third party services such as Dropbox, Box & Google Drive via
   * the API. You must download the file content first and then upload it as
   * any other attachment.
   *
   * The 100MB size limit on attachments in Asana is enforced on this endpoint.
   *
   * This endpoint expects a multipart/form-data encoded request containing
   * the full contents of the file to be uploaded.
   *
   * Below is an example of what a well formed multipart/form-data encoded
   * request might look like.
   *
   * ```
   * Authorization: Basic <BASE64_ENCODED_API_KEY>
   * Content-Type: multipart/form-data; boundary=<UNIQUE_BOUNDARY>
   * User-Agent: Java/1.7.0_76
   * Host: localhost
   * Accept: *\/*
   * Connection: keep-alive
   * Content-Length: 141
   *
   * --<UNIQUE_BOUNDARY>
   * Content-Disposition: form-data; name="file"; filename="example.txt"
   * Content-Type: text/plain
   *
   * <RAW_FILE_DATA>
   *
   * --<UNIQUE_BOUNDARY>--
   * ```
   *
   * Requests made should follow the HTTP/1.1 specification that line
   * terminators are of the form `CRLF` or `\r\n` outlined
   * [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules)
   * in order for the server to reliably and properly handle the request.
   */
  uploadAttachmentToTask: {
    parameters: {
      path: {
        /** Globally unique identifier for the task. */
        task_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully uploaded the attachment to the task. */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /**
     * The file you want to upload.
     *
     * **Note when using curl:**
     *
     * Be sure to add an `‘@’` before the file path, and use the `—form`
     * option instead of the `-d` option.
     *
     * When uploading PDFs with curl, force the content-type to be pdf by
     * appending the content type to the file path: `—form
     * “file=@file.pdf;type=application/pdf”`.
     */
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
  };
  /**
   * There are many cases where you want to accomplish a variety of work in
   * the Asana API but want to minimize the number of HTTP requests you make.
   * For example:
   *
   * * Modern browsers limit the number of requests that a single web page can
   *   make at once.
   * * Mobile apps will use more battery life to keep the cellular radio on
   *   when making a series of requests.
   * * There is an overhead cost to developing software that can make multiple
   *   requests in parallel.
   * * Some cloud platforms handle parallelism poorly, or disallow it
   *   entirely.
   * * To make development easier in these use cases, Asana provides a **batch
   *   API** that enables developers to perform multiple “actions” by making
   *   only a single HTTP request.
   *
   * **Making a Batch Request**
   *
   * To make a batch request, send a `POST` request to `/batch`. Like other
   * `POST` endpoints, the body should contain a `data` envelope. Inside this
   * envelope should be a single `actions` field, containing a list of
   * “action” objects.  Each action represents a standard request to an
   * existing endpoint in the Asana API.
   *
   * **The maximum number of actions allowed in a single batch request is 10**.
   * Making a batch request with no actions in it will result in a `400 Bad
   * Request`.
   *
   * When the batch API receives the list of actions to execute, it will
   * dispatch those actions to the already-implemented endpoints specified by
   * the `relative_path` and `method` for each action. This happens in
   * parallel, so all actions in the request will be processed simultaneously.
   * There is no guarantee of the execution order for these actions, nor is
   * there a way to use the output of one action as the input of another
   * action (such as creating a task and then commenting on it).
   *
   * The response to the batch request will contain (within the `data`
   * envelope) a list of result objects, one for each action. The results are
   * guaranteed to be in the same order as the actions in the request, e.g.,
   * the first result in the response corresponds to the first action in the
   * request.
   *
   * The batch API will always attempt to return a `200 Success` response with
   * individual result objects for each individual action in the request. Only
   * in certain cases (such as missing authorization or malformed JSON in the
   * body) will the entire request fail with another status code. Even if
   * every individual action in the request fails, the batch API will still
   * return a `200 Success` response, and each result object in the response
   * will contain the errors encountered with each action.
   *
   * **Rate Limiting**
   *
   * The batch API fully respects all of our rate limiting. This means that a
   * batch request counts against *both* the standard rate limiter and the
   * concurrent request limiter as though you had made a separate HTTP request
   * for every individual action. For example, a batch request with five
   * actions counts as five separate requests in the standard rate limiter,
   * and counts as five concurrent requests in the concurrent request limiter.
   * The batch request itself incurs no cost.
   *
   * If any of the actions in a batch request would exceed any of the enforced
   * limits, the *entire* request will fail with a `429 Too Many Requests`
   * error. This is to prevent the unpredictability of which actions might
   * succeed if not all of them could succeed.
   *
   * **Restrictions**
   *
   * Not every API endpoint can be accessed through the batch API.
   * Specifically, the following actions cannot be taken and will result in a
   * `400 Bad Request` for that action:
   *
   * * Uploading attachments
   * * Creating, getting, or deleting organization exports
   * * Any SCIM operations
   * * Nested calls to the batch API
   */
  batchRequest: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully completed the requested batch API operations. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["BatchResponse"][];
          };
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The requests to batch together via the Batch API. */
    requestBody: {
      content: {
        "application/json": {
          data?: {
            actions?: components["schemas"]["BatchRequest"][];
          };
        };
      };
    };
  };
  /**
   * Creates a new custom field in a workspace. Every custom field is required
   * to be created in a specific workspace, and this workspace cannot be
   * changed once set.
   *
   * A custom field’s name must be unique within a workspace and not conflict
   * with names of existing task properties such as ‘Due Date’ or ‘Assignee’.
   * A custom field’s type must be one of ‘text’, ‘enum’, or ‘number’.
   *
   * Returns the full record of the newly created custom field.
   */
  createCustomField: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Custom field successfully created. */
      201: {
        content: {
          "application/json": components["schemas"]["CustomFieldObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The custom field object to create. */
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["CustomField"] & {
            /**
             * @description The workspace to create a custom field in.
             * @example 1331
             */
            workspace: number;
          };
        };
      };
    };
  };
  /**
   * Get the complete definition of a custom field’s metadata.
   *
   * Since custom fields can be defined for one of a number of types, and
   * these types have different data and behaviors, there are fields that are
   * relevant to a particular type. For instance, as noted above, enum_options
   * is only relevant for the enum type and defines the set of choices that
   * the enum could represent. The examples below show some of these
   * type-specific custom field definitions.
   *
   * **Get the metadata for a custom field of type ‘text’**
   *
   * ```
   * # Request
   * curl -H "Authorization: Bearer <personal_access_token>" \
   * https://app.asana.com/api/1.0/custom_fields/124578
   * ```
   *
   * ```
   * # Response
   * HTTP/1.1 200
   * {
   *   "data": [
   *     {
   *       "id": 134679,
   *       "name": "Owner",
   *       "description": "Person responsible for task",
   *       "type": "text"
   *     }
   *   ]
   * }
   * ```
   *
   * **Get the metadata for a custom field of type ‘number’**
   *
   * ```
   * # Request
   * curl -H "Authorization: Bearer <personal_access_token>" \
   * https://app.asana.com/api/1.0/custom_fields/124578
   * ```
   *
   * ```
   * # Response
   * HTTP/1.1 200
   * {
   *   "data": [
   *     {
   *       "id": 938271,
   *       "name": "Price",
   *       "description": "In US Dollars",
   *       "type": "number",
   *       "precision": 2
   *     }
   *   ]
   * }
   * ```
   *
   * **Get the metadata for a custom field when that field is of type ‘enum’.**
   *
   * ```
   * # Request
   * curl -H "Authorization: Bearer <personal_access_token>" \
   * https://app.asana.com/api/1.0/custom_fields/124578
   * ```
   *
   * ```
   * # Response
   * HTTP/1.1 200
   * {
   *   "data": [
   *     {
   *       "id": 124578,
   *       "name": "Priority",
   *       "description": "Development team priority",
   *       "type": "enum",
   *       "enum_options": [
   *         {
   *           "id": 789,
   *           "name": "Low",
   *           "enabled": true,
   *           "color": "blue"
   *         },
   *         {
   *           "id": 208,
   *           "name": "Medium",
   *           "enabled": false,
   *           "color": "yellow"
   *         },
   *         {
   *           "id": 439,
   *           "name": "High",
   *           "enabled": true,
   *           "color": "red"
   *         }
   *       ]
   *     }
   *   ]
   * }
   * ```
   */
  getCustomField: {
    parameters: {
      path: {
        /** Globally unique identifier for the custom field. */
        custom_field_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the complete definition of a custom field’s metadata. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged
   * When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.
   * A custom field’s `type` cannot be updated.
   * An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`.
   * Locked custom fields can only be updated by the user who locked the field.
   * Returns the complete updated custom field record.
   */
  updateCustomField: {
    parameters: {
      path: {
        /** Globally unique identifier for the custom field. */
        custom_field_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** The custom field was successfully updated. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The custom field object with all updated properties. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomFieldObject"];
      };
    };
  };
  /**
   * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.
   * Locked custom fields can only be deleted by the user who locked the field.
   * Returns an empty data record.
   */
  deleteCustomField: {
    parameters: {
      path: {
        /** Globally unique identifier for the custom field. */
        custom_field_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** The custom field was successfully deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 50 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list.
   * Locked custom fields can only have enum options added by the user who locked the field.
   * Returns the full record of the newly created enum option.
   */
  addEnumOption: {
    parameters: {
      path: {
        /** Globally unique identifier for the custom field. */
        custom_field_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Custom field enum option successfully created. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["EnumOption"];
          };
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The enum option object to create. */
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["EnumOption"] &
            (
              | {
                  /**
                   * @description An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
                   * @example 12345
                   */
                  insert_before?: number;
                }
              | {
                  /**
                   * @description An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
                   * @example 12345
                   */
                  insert_after?: number;
                }
            );
        };
      };
    };
  };
  /**
   * Moves a particular enum option to be either before or after another specified enum option in the custom field.
   * Locked custom fields can only be reordered by the user who locked the field.
   */
  reorderEnumOption: {
    parameters: {
      path: {
        /** Globally unique identifier for the custom field. */
        custom_field_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Custom field enum option successfully reordered. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["EnumOption"];
          };
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The enum option object to create. */
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["EnumOption"] & {
            /**
             * @description The ID of the enum option to relocate.
             * @example 97285
             */
            enum_option?: number;
          } & (
              | {
                  /**
                   * @description An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
                   * @example 12345
                   */
                  before_enum_option?: number;
                }
              | {
                  /**
                   * @description An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
                   * @example 12345
                   */
                  after_enum_option?: number;
                }
            );
        };
      };
    };
  };
  /**
   * Updates an existing enum option. Enum custom fields require at least one enabled enum option.
   * Locked custom fields can only be updated by the user who locked the field.
   * Returns the full record of the updated enum option.
   */
  updateEnumOption: {
    parameters: {
      path: {
        /** Globally unique identifier for the enum option. */
        enum_option_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully updated the specified custom field enum. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["EnumOption"];
          };
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The enum option object to update */
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["EnumOption"];
        };
      };
    };
  };
  /** Returns a list of the compact representation of all of the custom fields in a workspace. */
  getCustomFieldsInWorkspace: {
    parameters: {
      path: {
        /** The workspace or organization to find custom field definitions in. */
        workspace_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved all custom fields for the given workspace. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` and `opt_expand` can be used to include more data than is returned in the compact representation. See the [getting started guide on input/output options](https://asana.com/developers/documentation/getting-started/input-output-options) for more information. */
  getCustomFieldSettingsForProject: {
    parameters: {
      path: {
        /** The ID of the project for which to list custom field settings. */
        project_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved custom field settings objects for a project. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldSettingsArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns a list of all of the custom fields settings on a portfolio, in compact form. */
  getCustomFieldSettingsForPortfolio: {
    parameters: {
      path: {
        /** The ID of the portfolio for which to list custom field settings. */
        portfolio_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved custom field settings objects for a portfolio. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldSettingsArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Returns the full record for all events that have occurred since the sync
   * token was created.
   *
   * A GET request to the endpoint /[path_to_resource]/events can be made in
   * lieu of including the resource ID in the data for the request.
   */
  getEvents: {
    parameters: {
      query: {
        /** A resource ID to subscribe to. The resource can be a task or project. */
        resource: number;
        /**
         * A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated.
         * **Note**: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token.If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.
         */
        sync?: string;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved events. */
      200: {
        content: {
          "application/json": components["schemas"]["EventArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** This method creates a request to export an Organization. Asana will complete the export at some point after you create the request. */
  createOrganizationExport: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully created organization export request. */
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationExportObjectResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The organization to export. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Globally unique identifier for the workspace or organization.
           * @example 1331
           */
          organization?: number;
        };
      };
    };
  };
  /** Returns details of a previously-requested Organization export. */
  getOrganizationExport: {
    parameters: {
      path: {
        /** Globally unique identifier for the organization export. */
        organization_export_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved organization export object. */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationExportObjectResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns a list of the portfolios in compact representation that are owned by the current API user. */
  getPortfolios: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** The workspace or organization to filter portfolios on. */
        workspace?: string;
        /** The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own. */
        owner?: string;
      };
    };
    responses: {
      /** Successfully retrieved portfolios. */
      200: {
        content: {
          "application/json": components["schemas"]["PortfolioArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Creates a new portfolio in the given workspace with the supplied name.
   *
   * Note that portfolios created in the Asana UI may have some state
   * (like the “Priority” custom field) which is automatically added
   * to the portfolio when it is created. Portfolios created via our
   * API will **not** be created with the same initial state to allow
   * integrations to create their own starting state on a portfolio.
   */
  createPortfolio: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved portfolios. */
      201: {
        content: {
          "application/json": components["schemas"]["PortfolioArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The portfolio to create. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PortfolioObject"];
      };
    };
  };
  /** Returns the complete portfolio record for a single portfolio. */
  getPortfolio: {
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the requested portfolio. */
      200: {
        content: {
          "application/json": components["schemas"]["PortfolioObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * An existing portfolio can be updated by making a PUT request on the URL for
   * that portfolio. Only the fields provided in the `data` block will be updated;
   * any unspecified fields will remain unchanged.
   *
   * Returns the complete updated portfolio record.
   */
  updateportfolio: {
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully updated the portfolio. */
      200: {
        content: {
          "application/json": components["schemas"]["PortfolioObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The updated fields for the portfolio. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PortfolioObject"];
      };
    };
  };
  /**
   * An existing portfolio can be deleted by making a DELETE request on
   * the URL for that portfolio.
   *
   * Returns an empty data record.
   */
  deletePortfolio: {
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully deleted the specified portfolio. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Get a list of the items (projects) in compact form in a portfolio. */
  getPortfolioItems: {
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the requested portfolio's items. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Add an item (project) to a portfolio.
   * Returns an empty data block.
   */
  addPortfolioItem: {
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** The item (project) to add to the portfolio. */
        item: string;
        /** An id of an item (project) in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_before: string;
        /** An id of an item (project) in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_after: string;
      };
    };
    responses: {
      /** Successfully added the item to the portfolio. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Remove an item (project) from a portfolio.
   * Returns an empty data block.
   */
  removePortfolioItem: {
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** The item (project) to remove from the portfolio. */
        item: string;
      };
    };
    responses: {
      /** Successfully added the item to the portfolio. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio. */
  "portfolio.addCustomFieldSetting": {
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** The custom field to associate with this portfolio. */
        custom_field: number;
        /** Whether this field should be considered important to this portfolio (for instance, to display in the list view of items in the portfolio). */
        is_important?: boolean;
        /** An id of a Custom Field Setting on this portfolio, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_before?: number;
        /** An id of a Custom Field Setting on this portfolio, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_after?: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
      };
    };
    responses: {
      /** Successfully added the custom field to the portfolio. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Removes a custom field setting from a portfolio. */
  "portfolio.removeCustomFieldSetting": {
    parameters: {
      path: {
        /** Globally unique identifier for the portfolio. */
        portfolio_gid: components["parameters"]["portfolio_path_gid"];
      };
      query: {
        /** The custom field to remove from this portfolio. */
        custom_field: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
      };
    };
    responses: {
      /** Successfully removed the custom field from the portfolio. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact project membership records for the project. */
  getProjectMembershipsForProject: {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** The user to filter results on. */
        user?: components["parameters"]["user_query_param"];
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the requested project's memberships. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectMembershipArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the complete project record for a single project membership. */
  getProjectMembership: {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the requested project membership. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectMembershipObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact project status update records for all updates on the project. */
  getProductStatuses: {
    parameters: {
      path: {
        /** The project to get statuses from. */
        project_gid: number;
      };
    };
    responses: {
      /** Successfully retrieved the specified project's status updates. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectStatusArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Creates a new status update on the project.
   * Returns the full record of the newly created project status update.
   */
  createProjectStatus: {
    parameters: {
      path: {
        /** The project to get statuses from. */
        project_gid: number;
      };
    };
    responses: {
      /** Successfully created a new story. */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectStatusObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The project status to create. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Globally unique identifier for the project.
           * @example 123456
           */
          project: number;
          /**
           * @description The text of the project status update.
           * @example The project is on track to ship next month!
           */
          text: string;
          /**
           * @description The color to associate with the status update.
           * @enum {undefined}
           */
          color: "green" | "yellow" | "red";
        };
      };
    };
  };
  /** Returns the complete record for a single status update. */
  getProductStatus: {
    parameters: {
      path: {
        /** The project to get statuses from. */
        project_gid: number;
        /** The project status update to get. */
        project_status_gid: number;
      };
    };
    responses: {
      /** Successfully retrieved the specified project's status updates. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectStatusObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Deletes a specific, existing project status update.
   *
   * Returns an empty data record.
   */
  deleteProductStatus: {
    parameters: {
      path: {
        /** The project to get statuses from. */
        project_gid: number;
        /** The project status update to get. */
        project_status_gid: number;
      };
    };
    responses: {
      /** Successfully deleted the specified product status. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned. */
  getProjects: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** The workspace or organization to filter projects on. */
        workspace?: number;
        /** The team to filter projects on. */
        team?: number;
        /** Only return projects whose `archived` field takes on the value of this parameter. */
        archived?: components["parameters"]["archived_query_param"];
      };
    };
    responses: {
      /** Successfully retrieved projects. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Create a new project in a workspace or team.
   *
   * Every project is required to be created in a specific workspace or
   * organization, and this cannot be changed once set. Note that you can use
   * the `workspace` parameter regardless of whether or not it is an
   * organization.
   *
   * If the workspace for your project is an organization, you must also
   * supply a `team` to share the project with.
   *
   * Returns the full record of the newly created project.
   */
  createProject: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved projects. */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The project to create. */
    requestBody: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The name of the project.
             * @example Bug Project
             */
            name?: string;
            /**
             * @description The description of the project.
             * @example For tracking pesky bugs.
             */
            notes?: string;
            /**
             * @description The workspace or organization to create the project in.
             * @example 1331
             */
            workspace?: number;
            /**
             * @description If creating in an organization, the specific team to create the project in.
             * @example 14916
             */
            team?: number;
          };
        };
      };
    };
  };
  /** Returns the complete project record for a single project. */
  getProject: {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the requested project. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * A specific, existing project can be updated by making a PUT request on
   * the URL for that project. Only the fields provided in the `data` block
   * will be updated; any unspecified fields will remain unchanged.
   *
   * When using this method, it is best to specify only those fields you wish
   * to change, or else you may overwrite changes made by another user since
   * you last retrieved the task.
   *
   * Returns the complete updated project record.
   */
  updateProject: {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully updated the project. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The updated fields for the project. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectObject"];
      };
    };
  };
  /**
   * A specific, existing project can be deleted by making a DELETE request on
   * the URL for that project.
   *
   * Returns an empty data record.
   */
  deleteProject: {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully deleted the specified project. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time. */
  getProjectTasks: {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the requested project's tasks. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project. */
  "project.addCustomFieldSetting": {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** The custom field to associate with this project. */
        custom_field: number;
        /** Whether this field should be considered "important" to this project. This may cause it to be displayed more prominently, for example in the task grid. */
        is_important?: boolean;
        /** An id of a Custom Field Setting on this project, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_before?: number;
        /** An id of a Custom Field Setting on this project, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified. */
        insert_after?: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
      };
    };
    responses: {
      /** Successfully added the custom field to the project. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Removes a custom field setting from a project. */
  "project.removeCustomFieldSetting": {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** The custom field to remove from this project. */
        custom_field: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
      };
    };
    responses: {
      /** Successfully removed the custom field from the project. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact project records for all projects in the team. */
  getProjectsInTeam: {
    parameters: {
      path: {
        /** Globally unique identifier for the team. */
        team_gid: components["parameters"]["team_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** Only return projects whose `archived` field takes on the value of this parameter. */
        archived?: components["parameters"]["archived_query_param"];
      };
    };
    responses: {
      /** Successfully retrieved the requested team's projects. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Creates a project shared with the given team.
   *
   * Returns the full record of the newly created project.
   */
  createProjectsWithTeam: {
    parameters: {
      path: {
        /** Globally unique identifier for the team. */
        team_gid: components["parameters"]["team_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully created the specified project. */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The new project to create. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectObject"];
      };
    };
  };
  /** Returns the compact project records for all projects in the workspace. */
  getProjectsInWorkspace: {
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** Only return projects whose `archived` field takes on the value of this parameter. */
        archived?: components["parameters"]["archived_query_param"];
      };
    };
    responses: {
      /** Successfully retrieved the requested workspace's projects. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Returns the compact project records for all projects in the workspace.
   *
   * If the workspace for your project is an organization, you must also
   * supply a team to share the project with.
   *
   * Returns the full record of the newly created project.
   */
  createProjectsInWorkspace: {
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully created a new project in the specified workspace. */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The new project to create. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectObject"];
      };
    };
  };
  /** Returns the compact records for all sections in the specified project. */
  getSectionsInProject: {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved sections in project. */
      200: {
        content: {
          "application/json": components["schemas"]["SectionArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Creates a new section in a project.
   * Returns the full record of the newly created section.
   */
  createSectionInProject: {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully created the specified section. */
      201: {
        content: {
          "application/json": components["schemas"]["SectionObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The section to create. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The project to create the section in
           * @example 13579
           */
          project: number;
          /**
           * @description The text to be displayed as the section name. This cannot be an empty string.
           * @example Next Actions
           */
          name: string;
        };
      };
    };
  };
  /** Returns the complete record for a single section. */
  getSection: {
    parameters: {
      path: {
        /** The globally unique identified for the section. */
        section_gid: components["parameters"]["section_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved section. */
      200: {
        content: {
          "application/json": components["schemas"]["SectionObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * A specific, existing section can be updated by making a PUT request on
   * the URL for that project. Only the fields provided in the `data` block
   * will be updated; any unspecified fields will remain unchanged. (note that
   * at this time, the only field that can be updated is the `name` field.)
   *
   * When using this method, it is best to specify only those fields you wish
   * to change, or else you may overwrite changes made by another user since
   * you last retrieved the task.
   *
   * Returns the complete updated section record.
   */
  updateSection: {
    parameters: {
      path: {
        /** The globally unique identified for the section. */
        section_gid: components["parameters"]["section_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully updated the specified section. */
      200: {
        content: {
          "application/json": components["schemas"]["SectionObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The section to create. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SectionObject"];
      };
    };
  };
  /**
   * A specific, existing section can be deleted by making a DELETE request on
   * the URL for that section.
   *
   * Note that sections must be empty to be deleted.
   *
   * The last remaining section in a board view cannot be deleted.
   *
   * Returns an empty data block.
   */
  deleteSection: {
    parameters: {
      path: {
        /** The globally unique identified for the section. */
        section_gid: components["parameters"]["section_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully deleted the specified section. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Move sections relative to each other in a board view. One of
   * `before_section` or `after_section` is required.
   *
   * Sections cannot be moved between projects.
   *
   * At this point in time, moving sections is not supported in list views,
   * only board views.
   *
   * Returns an empty data block.
   */
  moveSection: {
    parameters: {
      path: {
        /** Globally unique identifier for the project. */
        project_gid: components["parameters"]["project_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully moved the specified section. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The section's move action. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The project in which to reorder the given section.
           * @example 123456
           */
          project: number;
          /**
           * @description The section to reorder.
           * @example 321654
           */
          section: number;
          /**
           * @description Insert the given section immediately before the section specified by this parameter.
           * @example 86420
           */
          before_section: number;
          /**
           * @description Insert the given section immediately after the section specified by this parameter.
           * @example 987654
           */
          after_section: number;
        };
      };
    };
  };
  /** Returns the compact records for all stories on the task. */
  getTaskStories: {
    parameters: {
      path: {
        /** The task to get stories from. */
        task_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified task's stories. */
      200: {
        content: {
          "application/json": components["schemas"]["StoryArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Adds a comment to a task. The comment will be authored by the currently
   * authenticated user, and timestamped when the server receives the
   * request.
   *
   * Returns the full record for the new story added to the task.
   */
  createCommentStory: {
    parameters: {
      path: {
        /** The task to get stories from. */
        task_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully created a new story. */
      201: {
        content: {
          "application/json": components["schemas"]["StoryObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The comment story to create. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Globally unique identifier for the task.
           * @example 123456
           */
          task: number;
          /**
           * @description The plain text of the comment to add.
           * @example This is a comment.
           */
          text: string;
        };
      };
    };
  };
  /** Returns the full record for a single story. */
  getStory: {
    parameters: {
      path: {
        /** The globally unique identifier for the story. */
        story_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified story. */
      200: {
        content: {
          "application/json": components["schemas"]["StoryObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified. */
  updateStory: {
    parameters: {
      path: {
        /** The globally unique identifier for the story. */
        story_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified story. */
      200: {
        content: {
          "application/json": components["schemas"]["StoryObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The comment story to update. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["StoryObject"];
      };
    };
  };
  /**
   * Deletes a story. A user can only delete stories they have created. Returns an empty data record.
   *
   * Returns an empty data record.
   */
  deleteStory: {
    parameters: {
      path: {
        /** The globally unique identifier for the story. */
        story_gid: string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully deleted the specified story. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned. */
  queryTags: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** The workspace to filter tags on. */
        workspace?: number;
        /** Only return tags whose `archived` field takes on the value of this parameter. */
        archived?: boolean;
      };
    };
    responses: {
      /** Successfully retrieved the specified set of tags. */
      200: {
        content: {
          "application/json": components["schemas"]["TagArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Creates a new tag in a workspace or organization.
   *
   * Every tag is required to be created in a specific workspace or
   * organization, and this cannot be changed once set. Note that you can use
   * the workspace parameter regardless of whether or not it is an
   * organization.
   *
   * Returns the full record of the newly created tag.
   */
  createTag: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully created the newly specified tag. */
      201: {
        content: {
          "application/json": components["schemas"]["TagObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The tag to create. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagObject"];
      };
    };
  };
  /** Returns the complete tag record for a single tag. */
  getTag: {
    parameters: {
      path: {
        /** Globally unique identifier for the tag. */
        tag_gid: components["parameters"]["tag_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified tag. */
      200: {
        content: {
          "application/json": components["schemas"]["TagObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Updates the properties of a tag. Only the fields provided in the `data`
   * block will be updated; any unspecified fields will remain unchanged.
   *
   * When using this method, it is best to specify only those fields you wish
   * to change, or else you may overwrite changes made by another user since
   * you last retrieved the task.
   *
   * Returns the complete updated tag record.
   */
  updateTag: {
    parameters: {
      path: {
        /** Globally unique identifier for the tag. */
        tag_gid: components["parameters"]["tag_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully updated the specified tag. */
      200: {
        content: {
          "application/json": components["schemas"]["TagObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time. */
  getTagTasks: {
    parameters: {
      path: {
        /** Globally unique identifier for the tag. */
        tag_gid: components["parameters"]["tag_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the tasks associated with the specified tag. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned. */
  queryAllTagsInWorkspace: {
    parameters: {
      path: {
        /** The workspace to filter tags on. */
        workspace_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified set of tags. */
      200: {
        content: {
          "application/json": components["schemas"]["TagArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Creates a new tag in a workspace or organization.
   *
   * Every tag is required to be created in a specific workspace or
   * organization, and this cannot be changed once set. Note that you can use
   * the workspace parameter regardless of whether or not it is an
   * organization.
   *
   * Returns the full record of the newly created tag.
   */
  createTagInWorkspace: {
    parameters: {
      path: {
        /** The workspace to filter tags on. */
        workspace_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified set of tags. */
      200: {
        content: {
          "application/json": components["schemas"]["TagArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The tag to create. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagObject"];
      };
    };
  };
  /** Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`. */
  queryTasks: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /**
         * The assignee to filter tasks on.
         * **Note**: If you specify `assignee`, you must also specify the `workspace` to filter on.
         */
        assignee?: number | "me" | string;
        /** The project to filter tasks on. */
        project?: number;
        /**
         * The section to filter tasks on.
         * **Note**: Currently, this is only supported in board views.
         */
        section?: number;
        /**
         * The workspace to filter tasks on.
         * **Note**: If you specify `workspace`, you must also specify the `assignee` to filter on.
         */
        workspace?: number;
        /** Only return tasks that are either incomplete or that have been completed since this time. */
        completed_since?: string | "now";
        /**
         * Only return tasks that have been modified since the given time.
         *
         * **Note**: A task is considered “modified” if any of its properties
         * change, or associations between it and other objects are modified
         * (e.g.  a task being added to a project). A task is not considered
         * modified just because another object it is associated with (e.g. a
         * subtask) is modified. Actions that count as modifying the task
         * include assigning, renaming, completing, and adding stories.
         */
        modified_since?: string | "now";
      };
    };
    responses: {
      /** Successfully retrieved requested tasks. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Creating a new task is as easy as POSTing to the `/tasks` endpoint with a
   * data block containing the fields you’d like to set on the task. Any
   * unspecified fields will take on default values.
   *
   * Every task is required to be created in a specific workspace, and this
   * workspace cannot be changed once set. The workspace need not be set
   * explicitly if you specify `projects` or a `parent` task instead.
   *
   * `projects` can be a comma separated list of projects, or just a single
   * project the task should belong to.
   */
  createTask: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully created a new task. */
      201: {
        content: {
          "application/json": components["schemas"]["TaskObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The task to create. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskObject"];
      };
    };
  };
  /** Returns the complete task record for a single task. */
  getTask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified task. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * A specific, existing task can be updated by making a PUT request on the
   * URL for that task. Only the fields provided in the `data` block will be
   * updated; any unspecified fields will remain unchanged.
   *
   * When using this method, it is best to specify only those fields you wish
   * to change, or else you may overwrite changes made by another user since
   * you last retrieved the task.
   *
   * Returns the complete updated task record.
   */
  updateTask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully updated the specified task. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The task to update. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskObject"];
      };
    };
  };
  /**
   * A specific, existing task can be deleted by making a DELETE request on
   * the URL for that task. Deleted tasks go into the “trash” of the user
   * making the delete request. Tasks can be recovered from the trash within a
   * period of 30 days; afterward they are completely removed from the system.
   *
   * Returns an empty data record.
   */
  deleteTask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully deleted the specified task. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns a compact representation of all of the subtasks of a task. */
  getSubTasks: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified task's subtasks. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask. */
  createSubtask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully created the specified subtask. */
      201: {
        content: {
          "application/json": components["schemas"]["TaskObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The new subtask to create. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskObject"];
      };
    };
  };
  /** parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent. */
  changeSubtaskParent: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully changed the parent of the specified subtask. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The new parent of the subtask. */
    requestBody: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The new parent of the task, or `null` for no parent.
             * @example 987654
             */
            parent: number;
            /**
             * @description A subtask of the parent to insert the task after, or `null` to insert at the beginning of the list.
             * @example null
             */
            insert_after?: number;
            /**
             * @description A subtask of the parent to insert the task before, or `null` to insert at the end of the list.
             * @example 124816
             */
            insert_before?: number;
          };
        };
      };
    };
  };
  /** Returns the compact representations of all of the dependencies of a task. */
  getTaskDependencies: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified task's dependencies. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 15 dependencies*. */
  addTaskDependencies: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully set the specified dependencies on the task. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The list of tasks to set as dependencies. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DependencyArray"];
      };
    };
  };
  /** Unlinks a set of dependencies from this task. */
  removeTaskDependencies: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully unlinked the dependencies from the specified task. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The list of tasks to unlink as dependencies. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DependencyArray"];
      };
    };
  };
  /** Returns the compact representations of all of the dependents of a task. */
  getTaskDependents: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the specified dependents of the task. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents*. */
  addTaskDependents: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully set the specified dependents on the given task. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The list of tasks to add as dependents. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DependentArray"];
      };
    };
  };
  /** Unlinks a set of dependents from this task. */
  removeTaskDependents: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully unlinked the specified tasks as dependents. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The list of tasks to remove as dependents. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DependentArray"];
      };
    };
  };
  /** Returns a compact representation of all of the projects the task is in. */
  getTaskProjects: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the projects for the given task. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Adds the task to the specified project, in the optional location
   * specified. If no location arguments are given, the task will be added to
   * the end of the project.
   *
   * `addProject` can also be used to reorder a task within a project or
   * section that already contains it.
   *
   * At most one of `insert_before`, `insert_after`, or `section` should be
   * specified. Inserting into a section in an non-order-dependent way can be
   * done by specifying section, otherwise, to insert within a section in a
   * particular place, specify `insert_before` or `insert_after` and a task
   * within the section to anchor the position of this task.
   *
   * Returns an empty data block.
   */
  addProjectToTask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully added the specified project to the task. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The project to add the task to. */
    requestBody: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The project to add the task to.
             * @example 13579
             */
            project: number;
            /**
             * @description A task in the project to insert the task after, or `null` to insert at the beginning of the list.
             * @example 124816
             */
            insert_after?: number | null;
            /**
             * @description A task in the project to insert the task before, or `null` to insert at the end of the list.
             * @example 432134
             */
            insert_before?: number | null;
            /**
             * @description A section in the project to insert the task into. The task will be inserted at the bottom of the section.
             * @example 987654
             */
            section?: number | null;
          };
        };
      };
    };
  };
  /**
   * Removes the task from the specified project. The task will still exist in
   * the system, but it will not be in the project anymore.
   *
   * Returns an empty data block.
   */
  removeProjectFromTask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully removed the specified project from the task. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The project to remove the task from. */
    requestBody: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The project to remove the task from.
             * @example 13579
             */
            project: number;
          };
        };
      };
    };
  };
  /** Get a compact representation of all of the tags the task has. */
  getTaskTags: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the tags for the given task. */
      200: {
        content: {
          "application/json": components["schemas"]["TagArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Adds a tag to a task. Returns an empty data block. */
  addTagToTask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully added the specified tag to the task. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The tag to add to the task. */
    requestBody: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The tag to add to the task.
             * @example 13579
             */
            tag: number;
          };
        };
      };
    };
  };
  /** Removes a tag from a task. Returns an empty data block. */
  removeTagFromTask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully removed the specified tag from the task. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The tag to remove from the task. */
    requestBody: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The tag to remove from the task.
             * @example 13579
             */
            tag: number;
          };
        };
      };
    };
  };
  /**
   * Adds a tag to a task. Returns an empty data block.
   * Each task can be associated with zero or more followers in the system.
   * Requests to add/remove followers, if successful, will return the complete updated task record, described above.
   */
  addFollowerToTask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully added the specified tag to the task. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The tag to add to the task. */
    requestBody: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The tag to add to the task.
             * @example [
             *   13579,
             *   321654
             * ]
             */
            followers: number[];
          };
        };
      };
    };
  };
  /** Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task. */
  removeFollowerToTask: {
    parameters: {
      path: {
        /** The task to operate on. */
        task_gid: components["parameters"]["task_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully removed the specified tag to the task. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The tag to remove to the task. */
    requestBody: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The tag to add to the task.
             * @example [
             *   13579,
             *   321654
             * ]
             */
            followers: number[];
          };
        };
      };
    };
  };
  /** **Board view only**: Returns the compact section records for all tasks within the given section. */
  getSectionTasks: {
    parameters: {
      path: {
        /** The globally unique identified for the section. */
        section_gid: components["parameters"]["section_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the section's tasks. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** The search endpoint allows you to build complex queries to find and fetch exactly the data you need from Asana. For a more comprehensive description of all the query parameters and limitations of this endpoint, see our [long-form documentation](/developers/documentation/getting-started/search-api) for this feature. */
  getWorkspaceTasksSearch: {
    parameters: {
      path: {
        /** The globally unique identifier for the workspace. */
        workspace_gid: number;
        /** The globally unique identified for the section. */
        section_gid: components["parameters"]["section_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the section's tasks. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the full record for a single team. */
  getTeam: {
    parameters: {
      path: {
        /** Globally unique identifier for the team. */
        team_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successsfully retrieved the record for a single team. */
      200: {
        content: {
          "application/json": components["schemas"]["TeamObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact records for all teams in the organization visible to the authorized user. */
  getAllTeams: {
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        organization_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Returns the team records for all teams in the organization or workspace accessible to the authenticated user. */
      200: {
        content: {
          "application/json": components["schemas"]["TeamArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact records for all teams to which the given user is assigned. */
  getTeamsForUser: {
    parameters: {
      path: {
        /** An identifier for the user. Can be one of an email address, the globally unique identifier for the user, or the keyword `me` to indicate the current user making the request. */
        user_gid: string | "me" | string;
      };
      query: {
        /** The workspace or organization to filter teams on. */
        organization_gid: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Returns the team records for all teams in the organization or workspace to which the given user is assigned. */
      200: {
        content: {
          "application/json": components["schemas"]["TeamArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact records for all users that are members of the team. */
  getUsersForTeam: {
    parameters: {
      path: {
        /** A globally unique identifier for the team. */
        team_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Returns the user records for all the members of the team, including guests and limited access users */
      200: {
        content: {
          "application/json": components["schemas"]["UserArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team. */
  addUserToTeam: {
    parameters: {
      path: {
        /** A globally unique identifier for the team. */
        team_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Returns the full user record for the added user. */
      200: {
        content: {
          "application/json": components["schemas"]["UserArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The user to add to the team. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserIdObject"];
      };
    };
  };
  /** The user making this call must be a member of the team in order to remove themselves or others. */
  removeUserFromTeam: {
    parameters: {
      path: {
        /** A globally unique identifier for the team. */
        team_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Returns an empty data record */
      200: {
        content: {
          "application/json": components["schemas"]["UserArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The user to remove from the team. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserIdObject"];
      };
    };
  };
  /**
   * Retrieves objects in the workspace based via an auto-completion/typeahead
   * search algorithm. This feature is meant to provide results quickly, so do
   * not rely on this API to provide extremely accurate search results. The
   * result set is limited to a single page of results with a maximum size, so
   * you won’t be able to fetch large numbers of results.
   *
   * The typeahead search API provides search for objects from a single
   * workspace. This endpoint should be used to query for objects when
   * creating an auto-completion/typeahead search feature. This API is meant
   * to provide results quickly and should not be relied upon for accurate or
   * exhaustive search results. The results sets are limited in size and
   * cannot be paginated.
   *
   * Queries return a compact representation of each object which is typically
   * the id and name fields. Interested in a specific set of fields or all of
   * the fields?! Of course you are. Use field selectors to manipulate what
   * data is included in a response.
   */
  getTypeahead: {
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported. */
        type: "custom_field" | "project" | "tag" | "task" | "user";
        /** The string that will be used to search for relevant objects. If an empty string is passed in, the API will currently return an empty result set. */
        query?: string;
        /** The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned. */
        count?: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved objects via a typeahead search algorithm. */
      200: {
        content: {
          "application/json": components["schemas"]["AsanaObjectArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the full record for a user task list. */
  getUserTaskList: {
    parameters: {
      path: {
        /** Globally unique identifier for the user task list. */
        user_task_list_gid: components["parameters"]["user_task_list_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the user task list. */
      200: {
        content: {
          "application/json": components["schemas"]["UserTaskListObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the full record for a user's task list. */
  getUsersTaskList: {
    parameters: {
      path: {
        /** Globally unique identifier for the user. */
        user_gid: components["parameters"]["user_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the user's task list. */
      200: {
        content: {
          "application/json": components["schemas"]["UserTaskListObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Returns the compact list of tasks in a user’s My Tasks list. The returned tasks will be in order within each assignee status group of `Inbox`, `Today`, and `Upcoming`.
   * **Note:** tasks in `Later` have a different ordering in the Asana web app than the other assignee status groups; this endpoint will still return them in list order in `Later` (differently than they show up in Asana, but the same order as in Asana’s mobile apps).
   * **Note:** Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.
   * **Note:** Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)
   */
  getUserTaskListTasks: {
    parameters: {
      query: {
        /** Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. */
        completed_since?: string;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
      path: {
        /** Globally unique identifier for the user task list. */
        user_task_list_gid: components["parameters"]["user_task_list_path_gid"];
      };
    };
    responses: {
      /** Successfully retrieved the user task list's tasks. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter.
   * Results are sorted by user ID.
   */
  getAllUsers: {
    parameters: {
      query: {
        /** The workspace or organization ID to filter users on. */
        workspace?: number;
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the requested user records. */
      200: {
        content: {
          "application/json": components["schemas"]["UserArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Returns the full user record for the single user with the provided ID.
   * Results are sorted by user ID.
   */
  getUser: {
    parameters: {
      path: {
        /** An identifier for the user. Can be one of an email address, the globally unique identifier for the user, or the keyword `me` to indicate the current user making the request. */
        user_gid: number | "me" | string;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Returns the user specified. */
      200: {
        content: {
          "application/json": components["schemas"]["UserObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Returns the user records for all users in the specified workspace or organization.
   * Results are sorted alphabetically by user names.
   */
  getUsersInWorkspace: {
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Return the users in the specified workspace or org. */
      200: {
        content: {
          "application/json": components["schemas"]["UserArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace. */
  getWebhooks: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
        /** The workspace to query for webhooks in. */
        workspace: number;
        /** Only return webhooks for the given resource. */
        resource?: number;
      };
    };
    responses: {
      /** Successfully retrieved the requested webhooks. */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * Establishing a webhook is a two-part process. First, a simple HTTP POST
   * similar to any other resource creation. Since you could have multiple
   * webhooks we recommend specifying a unique local id for each target.
   *
   * Next comes the confirmation handshake. When a webhook is created, we will
   * send a test POST to the target with an `X-Hook-Secret` header as
   * described in the [Resthooks Security
   * documentation](http://resthooks.org/docs/security/). The target must
   * respond with a `200 OK` and a matching `X-Hook-Secret` header to confirm
   * that this webhook subscription is indeed expected.
   *
   * If you do not acknowledge the webhook’s confirmation handshake it will
   * fail to setup, and you will receive an error in response to your attempt
   * to create it. This means you need to be able to receive and complete the
   * webhook *while* the POST request is in-flight.
   *
   * ```
   * # Request
   * curl -H "Authorization: Bearer <personal_access_token>" \
   * -X POST https://app.asana.com/api/1.0/webhooks \
   * -d "resource=8675309" \
   * -d "target=https://example.com/receive-webhook/7654"
   * ```
   *
   * ```
   * # Handshake sent to https://example.com/
   * POST /receive-webhook/7654
   * X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
   * ```
   *
   * ```
   * # Handshake response sent by example.com
   * HTTP/1.1 200
   * X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
   * ```
   *
   * ```
   * # Response
   * HTTP/1.1 201
   * {
   *   "data": {
   *     "id": 43214,
   *     "resource": {
   *       "id": 8675309,
   *       "name": "Bugs"
   *     },
   *     "target": "https://example.com/receive-webhook/7654",
   *     "active": false,
   *     "last_success_at": null,
   *     "last_failure_at": null,
   *     "last_failure_content": null
   *   }
   * }
   * ```
   */
  createWebhook: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully created the requested webhook. */
      201: {
        content: {
          "application/json": components["schemas"]["WebhookObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The webhook workspace and target. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description A resource ID to subscribe to. The resource can be a task or project.
           * @example 12345
           */
          resource: number;
          /**
           * Format: uri
           * @description The URL to receive the HTTP POST.
           * @example https://example.com/receive-webhook/7654
           */
          target: string;
        };
      };
    };
  };
  /** Returns the full record for the given webhook. */
  getWebhook: {
    parameters: {
      path: {
        /** The webhook to affect with the current operation. */
        webhook_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the requested webhook. */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** This method **permanently** removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued. */
  deleteWebhook: {
    parameters: {
      path: {
        /** The webhook to affect with the current operation. */
        webhook_gid: number;
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Successfully retrieved the requested webhook. */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the compact records for all workspaces visible to the authorized user. */
  getAllWorkspaces: {
    parameters: {
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Return all workspaces visible to the authorized user. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceArray"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /** Returns the full workspace record for a single workspace. */
  getWorkspace: {
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Return the full workspace record. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
  };
  /**
   * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged.
   * Currently the only field that can be modified for a workspace is its name.
   * Returns the complete, updated workspace record.
   */
  updateWorkspace: {
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** Update for the workspace was successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The workspace object with all updated properties. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceObject"];
      };
    };
  };
  /**
   * Add a user to a workspace or organization.
   * The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
   */
  addUserToWorkspace: {
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** The user was added successfully to the workspace or organization. */
      200: {
        content: {
          "application/json": components["schemas"]["UserObject"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The user to add to the workspace. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserIdObject"];
      };
    };
  };
  /**
   * Remove a user from a workspace or organization.
   * The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address.
   * Returns an empty data record.
   */
  removeUserToWorkspace: {
    parameters: {
      path: {
        /** Globally unique identifier for the workspace or organization. */
        workspace_gid: components["parameters"]["workspace_path_gid"];
      };
      query: {
        /** Provides the response in “pretty” output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. */
        opt_pretty?: components["parameters"]["pretty"];
        /**
         * Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         * The id of included objects will always be returned, regardless of the field options.
         */
        opt_fields?: components["parameters"]["fields"];
        /**
         * Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.
         * If the fields option is also used, it will take precedence over the expand option and prevent expansion.
         */
        opt_expand?: components["parameters"]["expand"];
        /** The number of objects to return per page. The value must be between 1 and 100. */
        limit?: components["parameters"]["limit"];
        /**
         * An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         * 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
         */
        offset?: components["parameters"]["offset"];
      };
    };
    responses: {
      /** The user was removed successfully to the workspace or organization. */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      "5XX": components["responses"]["InternalServerError"];
      default: components["responses"]["GenericErrorResponse"];
    };
    /** The user to remove from the workspace. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserIdObject"];
      };
    };
  };
}

export interface external {}
