/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/{widget_metadata_url}": {
    /**
     * Get the metadata from the app server to render a widget. <br> <br> <a href="../images/ac-widget-metadata.png">
     *   <img src="../images/ac-widget-metadata.png" alt="App components widget metadata request flow"/>
     * </a>
     */
    get: operations["getWidgetMetadata"];
    parameters: {
      query: {
        /** The URL of the URL attachment on the task (i.e., Jira issue, GitHub pull request) */
        resource_url: components["parameters"]["resource_url"];
        /** The workspace GID this hook is coming from. */
        workspace: components["parameters"]["workspace"];
        /** The task GID this hook is coming from. */
        task: components["parameters"]["task"];
        /** The user GID` this hook is coming from. */
        user: components["parameters"]["user"];
        /** The attachment ID of the URL attachment. */
        attachment: components["parameters"]["attachment"];
        /** The time (in ISO 8601 date format) when the request should expire. */
        expires_at: components["parameters"]["expires_at"];
      };
    };
  };
  "/{resource_attach_url}": {
    /** When the user attaches a resource URL to a task, Asana will make a signed request to the specified `resource_attach_url` in the app configuration. Information about the attached resource should be included in the response. */
    post: operations["attachResource"];
  };
  "/{resource_typeahead_url}": {
    /**
     * Gets typeahead results to render as a dropdown list in the resource lookup input field.
     *
     * When the user types into the lookup input field, Asana will send a request containing the entered string to the application's `typeahead_url`. The list of [TypeaheadItem](/docs/typeahead-item)s in the response will then be rendered in a dropdown list. When the user selects an item from the list, Asana will send a [resource attach](/docs/resource-attach) request to the app server, then process the response and render the attached resource in the widget.
     */
    get: operations["getTypeaheadResults"];
  };
  "/{form_metadata_url}": {
    /**
     * Get the metadata from the app server to render a form. <br> <br> <a href="../images/ac-form-metadata.png">
     *   <img src="../images/ac-form-metadata.png" alt="App components form metadata request flow"/>
     * </a>
     */
    get: operations["getFormMetadata"];
    parameters: {
      query: {
        /** The workspace GID this hook is coming from. */
        workspace: components["parameters"]["workspace"];
        /** The task GID this hook is coming from. */
        task: components["parameters"]["task"];
        /** The user GID` this hook is coming from. */
        user: components["parameters"]["user"];
        /** The time (in ISO 8601 date format) when the request should expire. */
        expires_at: components["parameters"]["expires_at"];
      };
    };
  };
  "/{modal_form_typeahead_url}": {
    /**
     * If a modal form field is of type `typehead`, this operation gets typeahead results to render as a dropdown list.
     *
     * When the user types into a modal form form field, Asana will send a request containing the entered string to the application's `typeahead_url`. The list of [TypeaheadItem](/docs/typeahead-item)s in the response will then be rendered in a dropdown list. <br> <br> <a href="../images/ac-form-typeahead.png">
     *   <img src="../images/ac-form-typeahead.png" alt="App components form typeahead request flow"/>
     * </a>
     */
    get: operations["getModalFormTypeaheadResults"];
  };
  "/{rule_action_typeahead_url}": {
    /**
     * In a rule action typeahead form field, this operation gets typeahead results to render as a dropdown list. Typeahead results are limited to 50 items.
     *
     * When the user types into a rule action form field, Asana will send a request containing the entered string to the application's `typeahead_url`. The list of [TypeaheadItem](/docs/typeahead-item)s in the response will then be rendered in a dropdown list. <br> <br> <a href="../images/ac-rule-typeahead.png">
     *   <img src="../images/ac-rule-typeahead.png" alt="App components rule typeahead request flow"/>
     * </a>
     */
    get: operations["getRuleActionTypeaheadResults"];
  };
  "/{on_change_callback}": {
    /**
     * The callback request made to an app server when a watched field's value changes within a form. <br> <br> <a href="../images/ac-form-on-change.png">
     *   <img src="../images/ac-form-on-change.png" alt="App components form on change request flow"/>
     * </a>
     */
    post: operations["onFormChange"];
  };
  "/{on_submit_callback}": {
    /**
     * The callback request made to an app server when a form is submitted. <br> <br> <a href="../images/ac-form-on-submit.png">
     *   <img src="../images/ac-form-on-submit.png" alt="App components form on submit request flow"/>
     * </a>
     */
    post: operations["onFormSubmit"];
  };
  "/{run_action_url}": {
    /**
     * The request made when an action is triggered. <br> <br> <a href="../images/ac-rule-run-action.png">
     *   <img src="../images/ac-rule-run-action.png" alt="App components rule run action request flow"/>
     * </a>
     */
    post: operations["runAction"];
  };
  "/{action.metadata_url}": {
    /**
     * When a user has navigated to the [custom rule builder](https://asana.com/guide/help/premium/rules#gl-create-rule) UI and selected a rule action (either through the sidebar or via a rule preset), Asana will make a request to the app to get the configuration form definition for the chosen rule action. This will initiate the flow to configure a new rule action or edit the configuration of an existing rule action. This is the endpoint and schema for updating rule actions; app triggers (V2) will be analogous. <br> <br> <a href="../images/ac-rule-metadata.png">
     *   <img src="../images/ac-rule-metadata.png" alt="App components rule metadata request flow"/>
     * </a>
     */
    get: operations["getActionMetadata"];
    parameters: {
      query: {
        /** The ID of an existing rule action that is being edited. Should be omitted when configuring a new rule action. */
        action?: components["parameters"]["action"];
        /** The ID of the configuration used to create the rule action. */
        action_type: components["parameters"]["action_type"];
        /** The project GID this hook is coming from. */
        project: components["parameters"]["project"];
        /** The workspace GID this hook is coming from. */
        workspace: components["parameters"]["workspace"];
        /** The user GID` this hook is coming from. */
        user: components["parameters"]["user"];
        /** The time (in ISO 8601 date format) when the request should expire. */
        expires_at: components["parameters"]["expires_at"];
      };
    };
  };
  "/{action.on_change_callback}": {
    /**
     * The callback request made to an app server when a watched field's value changes within an action form. <br> <br> <a href="../images/ac-rule-on-change.png">
     *   <img src="../images/ac-rule-on-change.png" alt="App components rule on change request flow"/>
     * </a>
     */
    post: operations["onActionFormChange"];
  };
  "/{action.on_submit_callback}": {
    /**
     * The form is submitted when the user chooses to create their rule. Asana will create the rule action data model object and make a signed request to the `on_submit_callback` specified in the form metadata returned from the fetch/update rule action form endpoints. Information about the created rule action should be included in the response if it was successfully created. This is the endpoint and schema for updating rule actions; app triggers (V2) will be analogous. <br> <br> <a href="../images/ac-rule-on-submit.png">
     *   <img src="../images/ac-rule-on-submit.png" alt="App components rule on submit request flow"/>
     * </a>
     */
    post: operations["onActionFormSubmit"];
  };
}

export interface components {
  schemas: {
    /** @description The building block of all app component requests. */
    RootUIComponentRequest: {
      /** @description The time (in ISO 8601 date format) when the request should expire. */
      expires_at?: string;
      /** @description The user GID this hook is coming from. */
      user?: string;
      /** @description The workspace GID this hook is coming from. */
      workspace?: string;
    };
    AttachResourceRequest: components["schemas"]["RootUIComponentRequest"] & {
      /** @description The task GID this hook is coming from. */
      task?: string;
      /** @description The attachment ID of the URL attachment */
      attachment?: string;
      /** @description The user’s input in the lookup text input. This is often a resource URL or resource key, such as `"CP-1"` or `"https://abcde.atlassian.net/browse/CP-1"` */
      query?: string;
    };
    /** @description The response to a successful lookup request. */
    AttachedResourceResponse: {
      /**
       * @description The name of the attached resource
       * @example Build the Thing
       */
      resource_name: string;
      /**
       * @description The URL of the attached resource
       * @example https://example.atlassian.net/browse/CP-1
       */
      resource_url: string;
      /**
       * @description The error that should be displayed to the user
       * @example No resource matched that input
       */
      error?: string;
    };
    /** @description An error response object indicating a bad request (i.e., a status code of `400`). */
    BadRequestResponse: {
      /** @description An object containing an `error` string to display to the user. */
      data?: {
        /**
         * @description The error to display.
         * @example Illegal or malformed request.
         */
        error?: string;
      };
    };
    /** @description An option for a checkbox field (i.e., an object in the field's `options` array). */
    CheckboxOption: {
      /**
       * @description The ID of the option.
       * @example opt-in
       */
      id: string;
      /**
       * @description The label of the option. Limit 80 characters.
       * @example Opt in
       */
      label: string;
    };
    /** @description An option for a dropdown field (i.e., an object in the field's `options` array). */
    DropdownOption: {
      /**
       * @description The ID of the option.
       * @example red
       */
      id: string;
      /**
       * @description The label of the option. Limit 80 characters.
       * @example Red
       */
      label: string;
      /**
       * @description *Optional*. The URL for the icon beside the label. If not present, no icon will be displayed.
       * @example https://example.com/red.png
       */
      icon_url?: string;
    };
    /** @description An error response object indicating a forbidden request (i.e., a status code of `403`). */
    ForbiddenResponse: {
      /** @description An object containing an `error` string to display to the user. */
      data?: {
        /**
         * @description The error to display.
         * @example Access forbidden.
         */
        error?: string;
      };
    };
    /** @description An error response object indicating a request that could not be found (i.e., a status code of `500`). */
    InternalServerErrorResponse: {
      /** @description An object containing an `error` string to display to the user. */
      data?: {
        /**
         * @description The error to display.
         * @example Internal server error.
         */
        error?: string;
      };
    };
    /** @description A modal form "field" that displays static text. Fields of this type do not collect user input. */
    "FormField-StaticText": {
      /**
       * @description The type of modal form field.
       * @example static_text
       * @enum {string}
       */
      type: "static_text";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example create-resource-field-1
       */
      id: string;
      /**
       * @description The text (i.e., label) for the field. Limit 50 characters.
       * @example Please enter the following details:
       */
      name: string;
    };
    /** @description A modal form field that accepts single-line text input. */
    "FormField-SingleLineText": {
      /**
       * @description The type of modal form field.
       * @example single_line_text
       * @enum {string}
       */
      type: "single_line_text";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example create-resource-field-1
       */
      id: string;
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 50 characters.
       * @example Resource name
       */
      name?: string;
      /**
       * @description *Optional*. Indicates whether the field is required to submit the form. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_required?: boolean;
      /**
       * @description *Optional*. Indicates whether the field should be watched. Fields that are watched send requests to the `on_change` URL specified in the form metadata to get updated form information. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_watched?: boolean;
      /**
       * @description *Optional*. The developer-specified error message displayed to the user if there is an error with the chosen value.
       * @example Please review and change your input
       */
      error?: string;
      /**
       * @description The placeholder for the input, which is shown if the field has no value. If not provided, there will be no placeholder.
       * @example Enter the full title of the resource here
       */
      placeholder?: string;
      /**
       * @description *Optional*. The width of the form field. If not provided, the default value will be `"full"`.
       * @example full
       * @enum {string}
       */
      width?: "full" | "half";
      /**
       * @description The value of the field. If not provided, the field will be empty and the form cannot be submitted if it is required. Limit 200 characters.
       * @example Annual Kick-Off Meeting
       */
      value?: string;
    };
    /** @description A modal form field that accepts multi-line text input. */
    "FormField-MultiLineText": {
      /**
       * @description The type of modal form field.
       * @example multi_line_text
       * @enum {string}
       */
      type: "multi_line_text";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example create-resource-field-1
       */
      id: string;
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 50 characters.
       * @example Resource name
       */
      name?: string;
      /**
       * @description *Optional*. Indicates whether the field is required to submit the form. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_required?: boolean;
      /**
       * @description *Optional*. Indicates whether the field should be watched. Fields that are watched send requests to the `on_change` URL specified in the form metadata to get updated form information. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_watched?: boolean;
      /**
       * @description *Optional*. The developer-specified error message displayed to the user if there is an error with the chosen value.
       * @example Please review and change your input
       */
      error?: string;
      /**
       * @description The placeholder for the input, which is shown if the field has no value. If not provided, there will be no placeholder.
       * @example Enter the full title of the resource here
       */
      placeholder?: string;
      /**
       * @description The value of the field. If not provided, the field will be empty and the form cannot be submitted if it is required. Limit 3000 characters.
       * @example Annual Kick-Off Meeting
       */
      value?: string;
    };
    /** @description A modal form field that accepts rich text input. */
    "FormField-RichText": {
      /**
       * @description The type of modal form field.
       * @example rich_text
       * @enum {string}
       */
      type: "rich_text";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example create-resource-field-1
       */
      id: string;
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 50 characters.
       * @example Resource name
       */
      name?: string;
      /**
       * @description *Optional*. Indicates whether the field is required to submit the form. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_required?: boolean;
      /**
       * @description *Optional*. Indicates whether the field should be watched. Fields that are watched send requests to the `on_change` URL specified in the form metadata to get updated form information. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_watched?: boolean;
      /**
       * @description *Optional*. The developer-specified error message displayed to the user if there is an error with the chosen value.
       * @example Please review and change your input
       */
      error?: string;
      /**
       * @description The placeholder for the input, which is shown if the field has no value. If not provided, there will be no placeholder.
       * @example Enter the full title of the resource here
       */
      placeholder?: string;
      /**
       * @description The value of the field. If not provided, the field will be empty and the form cannot be submitted if it is required. Limit 3000 characters.
       * @example Annual Kick-Off Meeting
       */
      value?: string;
    };
    /** @description A modal form field that accepts input via a dropdown list. Limit 50 options. */
    "FormField-Dropdown": {
      /**
       * @description The type of modal form field.
       * @example dropdown
       * @enum {string}
       */
      type: "dropdown";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example create-resource-field-1
       */
      id: string;
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 50 characters.
       * @example Resource name
       */
      name?: string;
      /**
       * @description *Optional*. Indicates whether the field is required to submit the form. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_required?: boolean;
      /**
       * @description *Optional*. Indicates whether the field should be watched. Fields that are watched send requests to the `on_change` URL specified in the form metadata to get updated form information. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_watched?: boolean;
      /**
       * @description *Optional*. The developer-specified error message displayed to the user if there is an error with the chosen value.
       * @example Please review and change your input
       */
      error?: string;
      /**
       * @description *Optional*. The width of the form field. If not provided, the default value will be `"full"`.
       * @example full
       * @enum {string}
       */
      width?: "full" | "half";
      /**
       * @description *Optional*. The value for the form field, which is the ID of the chosen DropdownOption object.
       * @example dropdown_option_1
       */
      value?: string;
      /** @description An array (minimum length: 1) of DropdownOption objects. */
      options: components["schemas"]["DropdownOption"][];
    };
    /** @description A modal form field that accepts radio button input. Limit 5 options. */
    "FormField-RadioButton": {
      /**
       * @description The type of modal form field.
       * @example radio_button
       * @enum {string}
       */
      type: "radio_button";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example create-resource-field-1
       */
      id: string;
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 50 characters.
       * @example Resource name
       */
      name?: string;
      /**
       * @description *Optional*. Indicates whether the field is required to submit the form. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_required?: boolean;
      /**
       * @description *Optional*. Indicates whether the field should be watched. Fields that are watched send requests to the `on_change` URL specified in the form metadata to get updated form information. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_watched?: boolean;
      /**
       * @description *Optional*. The developer-specified error message displayed to the user if there is an error with the chosen value.
       * @example Please review and change your input
       */
      error?: string;
      /**
       * @description *Optional*. The value for the form field, which is the ID of the chosen RadioOption object.
       * @example radio_option_1
       */
      value?: string;
      /** @description An array (minimum length: 1) of RadioOption objects. */
      options: components["schemas"]["RadioOption"][];
    };
    /** @description A modal form field that accepts checkbox input. Limit 10 options. */
    "FormField-Checkbox": {
      /**
       * @description The type of modal form field.
       * @example checkbox
       * @enum {string}
       */
      type: "checkbox";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example create-resource-field-1
       */
      id: string;
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 50 characters.
       * @example Resource name
       */
      name?: string;
      /**
       * @description *Optional*. Indicates whether the field is required to submit the form. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_required?: boolean;
      /**
       * @description *Optional*. Indicates whether the field should be watched. Fields that are watched send requests to the `on_change` URL specified in the form metadata to get updated form information. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_watched?: boolean;
      /**
       * @description *Optional*. The developer-specified error message displayed to the user if there is an error with the chosen value.
       * @example Please review and change your input
       */
      error?: string;
      /**
       * @description *Optional*. The values for the form field, which are the IDs of the chosen CheckboxOption objects.
       * @example [
       *   "opt-in"
       * ]
       */
      value?: string[];
      /** @description An array (minimum length: 1) of CheckboxOption objects. */
      options: components["schemas"]["CheckboxOption"][];
    };
    /** @description A modal form field that accepts date input. */
    "FormField-Date": {
      /**
       * @description The type of modal form field.
       * @example date
       * @enum {string}
       */
      type: "date";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example date-field-1
       */
      id: string;
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 50 characters.
       * @example Date
       */
      name?: string;
      /**
       * @description *Optional*. Indicates whether the field is required to submit the form. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_required?: boolean;
      /**
       * @description *Optional*. Indicates whether the field should be watched. Fields that are watched send requests to the `on_change` URL specified in the form metadata to get updated form information. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_watched?: boolean;
      /**
       * @description *Optional*. The developer-specified error message displayed to the user if there is an error with the chosen value.
       * @example Please review and change your input
       */
      error?: string;
      /**
       * @description The placeholder for the input, which is shown if the field has no value. If not provided, there will be no placeholder.
       * @example 2022-02-01
       */
      placeholder?: string;
      /**
       * Format: date
       * @description The value of the field. This takes a date with format YYYY-MM-DD.
       * @example 2022-02-01
       */
      value?: string | null;
    };
    /** @description A modal form field that accepts datetime input. */
    "FormField-Datetime": {
      /**
       * @description The type of modal form field.
       * @example datetime
       * @enum {string}
       */
      type: "datetime";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example datetime-field-1
       */
      id: string;
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 50 characters.
       * @example Datetime
       */
      name?: string;
      /**
       * @description *Optional*. Indicates whether the field is required to submit the form. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_required?: boolean;
      /**
       * @description *Optional*. Indicates whether the field should be watched. Fields that are watched send requests to the `on_change` URL specified in the form metadata to get updated form information. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_watched?: boolean;
      /**
       * @description *Optional*. The developer-specified error message displayed to the user if there is an error with the chosen value.
       * @example Please review and change your input
       */
      error?: string;
      /**
       * @description The placeholder for the input, which is shown if the field has no value. If not provided, there will be no placeholder.
       * @example 2022-02-01T14:48:00.000Z
       */
      placeholder?: string;
      /**
       * Format: date-time
       * @description The value of the field. This value takes the form of an ISO 8601 date string in UTC.
       * @example 2022-02-01T14:48:00.000Z
       */
      value?: string | null;
    };
    /** @description A modal form field that accepts typeahead input. */
    "FormField-Typeahead": {
      /**
       * @description The type of modal form field.
       * @example typeahead
       * @enum {string}
       */
      type: "typeahead";
      /**
       * @description The ID of the field, which is used to reference the field. These should be unique across the entire form.
       * @example typeahead_field_1
       */
      id: string;
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 50 characters.
       * @example Statuses
       */
      name?: string;
      /**
       * @description *Optional*. Indicates whether the field is required to submit the form. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_required?: boolean;
      /**
       * @description *Optional*. Indicates whether the field should be watched. Fields that are watched send requests to the `on_change` URL specified in the form metadata to get updated form information. If this property is not specified, the value is assumed `false`.
       * @example true
       */
      is_watched?: boolean;
      /**
       * @description *Optional*. The developer-specified error message displayed to the user if there is an error with the chosen value.
       * @example Please review and change your input
       */
      error?: string;
      /**
       * @description *Optional*. The width of the form field. If not provided, the default value will be `"full"`.
       * @example full
       * @enum {string}
       */
      width?: "full" | "half";
      /**
       * @description The URL that Asana uses to request typehead results from the application server.
       * @example https://www.app-server.com/app/typeahead
       */
      typeahead_url: string;
      value?: components["schemas"]["TypeaheadItem"] & {
        [key: string]: unknown;
      };
    };
    /** @description Contains the metadata that describes how to display and manage a form. */
    FormMetadataResponse: {
      /**
       * @description The interface name and version of a distinct form UI layout. A `template` is directly associated with a particular `metadata` schema.
       * @example form_metadata_v0
       * @enum {string}
       */
      template: "form_metadata_v0";
      /** @description The metadata (i.e., underlying definition) of a form. `metadata` must exist alongside a `template`, and its schema must be specific to the value of that `template`. */
      metadata: {
        /**
         * @description The title of the form, which is displayed at the top of the creation form
         * @example Create New Issue
         */
        title: string;
        /**
         * @description An array of form field objects that are rendered in the order they are in the array. Limit of 30 fields.
         *
         * Valid object schemas: [FormField-Checkbox](/docs/form-field-checkbox), [FormField-Date](/docs/form-field-date), [FormField-Datetime](/docs/form-field-datetime), [FormField-Dropdown](/docs/form-field-dropdown), [FormField-MultiLineText](/docs/form-field-multi-line-text), [FormField-RadioButton](/docs/form-field-radio-button), [FormField-RichText](/docs/form-field-rich-text), [FormField-SingleLineText](/docs/form-field-single-line-text), [FormField-StaticText](/docs/form-field-static-text), [FormField-Typeahead](/docs/form-field-typeahead)
         */
        fields: unknown[];
        /**
         * @description The text to display on the form’s submit button. If not provided, the default text “Submit” will be displayed on the button.
         * @example Create New Issue
         */
        submit_button_text?: string;
        /**
         * @description The URL to `POST` the form to when the user clicks the submit button. If this is field is omitted then the submission button will be disabled. This is useful if the user must enter information in a watched field first, such as to show additional fields.
         * @example https://www.example.com/on_submit
         */
        on_submit_callback?: string;
        /**
         * @description The URL to `POST` the form to whenever watched field values are changed.
         * @example https://www.example.com/on_change
         */
        on_change_callback?: string;
      };
    };
    FormSubmissionRequest: components["schemas"]["RootUIComponentRequest"] & {
      /** @description The task GID this hook is coming from. */
      task?: string;
      /** @description A FormValues object mapping each FormField’s name to its value. */
      values?: {
        [key: string]: {
          field_name?: string;
          /**
           * @description A form field object.
           *
           * Valid object schemas: [FormField-Checkbox](/docs/form-field-checkbox), [FormField-Date](/docs/form-field-date), [FormField-Datetime](/docs/form-field-datetime), [FormField-Dropdown](/docs/form-field-dropdown), [FormField-MultiLineText](/docs/form-field-multi-line-text), [FormField-RadioButton](/docs/form-field-radio-button), [FormField-RichText](/docs/form-field-rich-text), [FormField-SingleLineText](/docs/form-field-single-line-text), [FormField-StaticText](/docs/form-field-static-text), [FormField-Typeahead](/docs/form-field-typeahead)
           */
          field_object?: { [key: string]: unknown };
        };
      };
    };
    ActionFormSubmissionRequest: components["schemas"]["FormSubmissionRequest"] & {
      /** @description The name of the rule being created */
      rule_name?: string;
      /** @description The ID of an existing rule action that is being edited */
      action?: string;
      /** @description The ID of the configuration used to create the rule action. */
      action_type?: string;
      /** @description The project GID this hook is coming from. */
      project?: string;
    };
    /** @description A widget footer that displays the timestamp of the resource's creation time. */
    "WidgetFooter-Created": {
      /**
       * @description The type of widget footer.
       * @example created
       * @enum {string}
       */
      footer_type: "created";
      /**
       * @description The time (in ISO 8601 date format) to show in the footer.
       * @example 2012-02-22T02:06:58.147Z
       */
      created_at: string;
    };
    /** @description A widget footer that displays custom text and an optional icon. */
    "WidgetFooter-CustomText": {
      /**
       * @description The text to show in the footer.
       * @example custom_text
       * @enum {string}
       */
      footer_type: "custom_text";
      /**
       * @description The text to show in the footer.
       * @example This is a custom footer message
       */
      text: string;
      /**
       * @description *Optional*. The icon to show in the footer next to the text. If not provided, no icon will be shown.
       * @example https://example-icon.png
       */
      icon_url?: string;
    };
    FormOnChangeBaseRequest: components["schemas"]["RootUIComponentRequest"] & {
      /** @description The name of the changed FormField. */
      changed_field?: string;
    };
    FormOnChangeRequest: components["schemas"]["FormOnChangeBaseRequest"] & {
      /** @description The task GID this hook is coming from. */
      task?: string;
    };
    ActionFormOnChangeRequest: components["schemas"]["FormOnChangeBaseRequest"] & {
      /** @description The ID of an existing rule action that is being edited. */
      action?: string;
      /** @description The ID of the configuration used to create the rule action. */
      action_type?: string;
      /** @description The project GID this hook is coming from. */
      project?: string;
    };
    /** @description An error response object indicating a request that could not be found (i.e., a status code of `404`). */
    NotFoundResponse: {
      /** @description An object containing an `error` string to display to the user. */
      data?: {
        /**
         * @description The error to display.
         * @example Not found.
         */
        error?: string;
      };
    };
    RunActionRequest: components["schemas"]["RootUIComponentRequest"] & {
      /** @description The ID of the target object that the rule action is acting on. Currently, this value is always a task GID. */
      target_object?: string;
      /** @description The action ID generated from rule creation. */
      action?: string;
      /** @description The ID from the configuration used to create the rule action. */
      action_type?: string;
      /** @description A unique key associated with the "run action" request. App servers should use this key to implement idempotency. */
      idempotency_key?: string;
    };
    /** @description The response to an action request. */
    RanActionResponse: {
      /**
       * @description The error that should be displayed to the user.
       * @example That resource no longer exists
       */
      error?: string;
      /**
       * @description Specifies any additional information that the app wants to send to Asana on completion of the action. Can only be `resources_created` or `ok`.
       * @example ok
       * @enum {string}
       */
      action_result: "resources_created" | "ok";
      /** @description A field with the data corresponding to the action_result value. Each `action_result` has its own data field shape that Asana expects. `resources_created` expects the name and URL of the resources that the action created. */
      resources_created?: components["schemas"]["AttachedResourceResponse"][];
    };
    /** @description An option for a radio button field (i.e., an object in the field's `options` array). */
    RadioOption: {
      /**
       * @description The ID of the option.
       * @example blue
       */
      id: string;
      /**
       * @description The label of the option. Limit 80 characters.
       * @example Blue
       */
      label: string;
      /**
       * @description *Optional*. The label to display as subtext for the `label`.
       * @example #0000FF
       */
      sub_label?: string;
    };
    /** @description An object describing a typeahead result. */
    TypeaheadItem: {
      /**
       * @description The title of the typeahead item.
       * @example OTP Team PF
       */
      title: string;
      /**
       * @description The subtitle of the typeahead item.
       * @example OTP
       */
      subtitle?: string;
      /**
       * @description The value of the typeahead item.
       * @example OTP
       */
      value: string;
      /**
       * @description The URL of the icon to display next to the title.
       * @example https://example-icon.png
       */
      icon_url?: string;
    };
    TypeaheadListRequest: components["schemas"]["RootUIComponentRequest"] & {
      /**
       * @description The workspace GID this hook is coming from.
       * @example 12345
       */
      workspace?: string;
      /**
       * @description The user's input in the typeahead text input.
       * @example Messages
       */
      query?: string;
      /**
       * @description *Conditional*. The task GID this hook is coming from. `task` is only present in the [modal form](/docs/modal-form) (as there is a "context task"), but not in the [rule action](/docs/rule-action) (as rules are associated with a _project_).
       * @example 67890
       */
      task?: string;
      /**
       * @description The user GID this hook is coming from.
       * @example 54321
       */
      user?: string;
      /**
       * @description The time (in ISO 8601 format) when the request should expire.
       * @example 2019-04-15T01:01:46.055Z
       */
      expires_at?: string;
    };
    /** @description The response to a successful typeahead request. */
    TypeaheadListResponse: {
      /**
       * @description *Optional*. Header text to display above the list of typeahead results. If no `header` is passed in or the value is an empty string, only the typeahead results with be rendered.
       * @example List of messages
       */
      header?: string;
      /** @description Array of [TypeaheadItem](/docs/typeahead-item) objects that indicate typeahead results. */
      items: components["schemas"]["TypeaheadItem"][];
    };
    /** @description An error response object indicating a unauthorized request (i.e., a status code of `401`). */
    UnauthorizedResponse: {
      /** @description An object containing an `error` string to display to the user. */
      data?: {
        /**
         * @description The error to display.
         * @example Authorization required.
         */
        error?: string;
      };
    };
    /** @description A widget footer that displays the timestamp of the resource's last updated time. */
    "WidgetFooter-Updated": {
      /**
       * @description The type of widget footer.
       * @example updated
       * @enum {string}
       */
      footer_type: "updated";
      /**
       * @description The time (in ISO 8601 date format) to show in the footer.
       * @example 2012-02-22T02:06:58.147Z
       */
      last_updated_at: string;
    };
    /** @description A widget field that displays a timestamp and an optional icon. */
    "WidgetField-DatetimeWithIcon": {
      /**
       * @description The type of widget field.
       * @example datetime_with_icon
       * @enum {string}
       */
      type: "datetime_with_icon";
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 40 characters.
       * @example Status
       */
      name: string;
      /**
       * @description The time (in ISO 8601 date format) to display next to the icon.
       * @example 2012-02-22T02:06:58.147Z
       */
      datetime?: string;
      /**
       * @description *Optional*. The URL of the icon to display next to the time.
       * @example https://example-icon.png
       */
      icon_url?: string;
    };
    /** @description A widget field that displays custom text in a colored "pill" format. */
    "WidgetField-Pill": {
      /**
       * @description The type of widget field.
       * @example pill
       * @enum {string}
       */
      type: "pill";
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 40 characters.
       * @example Status
       */
      name: string;
      /**
       * @description The text to show in the field. Limit 40 characters.
       * @example In Progress
       */
      text: string;
      /**
       * @description The color of the pill.
       * @example cool-gray
       * @enum {string}
       */
      color:
        | "none"
        | "red"
        | "orange"
        | "yellow-orange"
        | "yellow"
        | "yellow-green"
        | "green"
        | "blue-green"
        | "aqua"
        | "blue"
        | "indigo"
        | "purple"
        | "magenta"
        | "hot-pink"
        | "pink"
        | "cool-gray";
    };
    /** @description A widget field that displays custom text with an optional icon. */
    "WidgetField-TextWithIcon": {
      /**
       * @description The type of widget field.
       * @example text_with_icon
       * @enum {string}
       */
      type: "text_with_icon";
      /**
       * @description The text (i.e., label) to show in the title of the field. Limit 40 characters.
       * @example Status
       */
      name: string;
      /**
       * @description The text to show in the field. Limit 40 characters.
       * @example In Progress
       */
      text: string;
      /**
       * @description *Optional*. The URL of the icon to display next to the text.
       * @example https://example-icon.png
       */
      icon_url?: string;
    };
    /** @description An object containing information about the widget. */
    WidgetMetadataResponse: {
      /**
       * @description The interface name and version of a distinct widget UI layout. A `template` is directly associated with a particular `metadata` schema.
       * @example summary_with_details_v0
       * @enum {string}
       */
      template: "summary_with_details_v0";
      /** @description The metadata (i.e., underlying definition) of a widget. `metadata` must exist alongside a `template`, and its schema must be specific to the value of that `template`. */
      metadata: {
        /**
         * @description The error that should be displayed to the user.
         * @example The resource cannot be accessed
         */
        error?: string;
        /**
         * @description The text to show in the title of the widget. Max length of 200 characters.
         * @example Status
         */
        title: string;
        /**
         * @description A list of fields showing data from external resources (i.e., an array of WidgetField objects). A widget must contain at least 1 field and no more than 5 fields.
         *
         * Valid object schemas: [WidgetField-DatetimeWithIcon](/docs/widget-field-datetime-with-icon), [WidgetField-Pill](/docs/widget-field-pill), [WidgetField-TextWithIcon](/docs/widget-field-text-with-icon).
         */
        fields: unknown[];
        /**
         * @description The text to show under the title of the widget, next to "Open in {App Name}". If not provided, the `resource_name` from the app definition will be used as default.
         * @example Custom App Story · Open in Custom App
         */
        subtitle?: string;
        /**
         * @description The URL of the subicon next to the subtitle . If not provided, no icon will be shown.
         * @example https://example-icon.png
         */
        subicon_url?: string;
        /**
         * @description Contains the information to display a footer on the widget.
         *
         * Valid schemas: [WidgetFooter-Created](/docs/widget-footer-created), [WidgetFooter-CustomText](/docs/widget-footer-custom-text), [WidgetFooter-Updated](/docs/widget-footer-updated).
         */
        footer: { [key: string]: unknown };
        /**
         * @description The number of comments to display on the lower right corner of the widget. If not provided, no comment count will be shown
         * @example 2
         */
        num_comments?: number;
      };
    };
  };
  responses: {
    /** Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["BadRequestResponse"];
      };
    };
    /** Unauthorized */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["UnauthorizedResponse"];
      };
    };
    /** Forbidden */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["ForbiddenResponse"];
      };
    };
    /** Not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["NotFoundResponse"];
      };
    };
    /** Too Many Requests */
    TooManyRequests: unknown;
    /** Gone */
    Gone: unknown;
    /** Server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["InternalServerErrorResponse"];
      };
    };
    /** I'm A Teapot */
    ImATeapot: unknown;
  };
  parameters: {
    /** @description The ID of an existing rule action that is being edited. Should be omitted when configuring a new rule action. */
    action: string;
    /** @description The ID of the configuration used to create the rule action. */
    action_type: string;
    /** @description The attachment ID of the URL attachment. */
    attachment: string;
    /** @description The time (in ISO 8601 date format) when the request should expire. */
    expires_at: string;
    /** @description The text entered into the typeahead input. */
    fragment: string;
    /** @description The project GID this hook is coming from. */
    project: string;
    /** @description The user GID` this hook is coming from. */
    user: string;
    /** @description The URL of the URL attachment on the task (i.e., Jira issue, GitHub pull request) */
    resource_url: string;
    /** @description The task GID this hook is coming from. */
    task: string;
    /** @description The workspace GID this hook is coming from. */
    workspace: string;
  };
}

export interface operations {
  /**
   * Get the metadata from the app server to render a widget. <br> <br> <a href="../images/ac-widget-metadata.png">
   *   <img src="../images/ac-widget-metadata.png" alt="App components widget metadata request flow"/>
   * </a>
   */
  getWidgetMetadata: {
    parameters: {
      query: {
        /** The URL of the URL attachment on the task (i.e., Jira issue, GitHub pull request) */
        resource_url: components["parameters"]["resource_url"];
        /** The workspace GID this hook is coming from. */
        workspace: components["parameters"]["workspace"];
        /** The task GID this hook is coming from. */
        task: components["parameters"]["task"];
        /** The user GID` this hook is coming from. */
        user: components["parameters"]["user"];
        /** The attachment ID of the URL attachment. */
        attachment: components["parameters"]["attachment"];
        /** The time (in ISO 8601 date format) when the request should expire. */
        expires_at: components["parameters"]["expires_at"];
      };
    };
    responses: {
      /** Successfully retrieved the metadata for a single widget. */
      200: {
        content: {
          "application/json": components["schemas"]["WidgetMetadataResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      418: components["responses"]["Unauthorized"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** When the user attaches a resource URL to a task, Asana will make a signed request to the specified `resource_attach_url` in the app configuration. Information about the attached resource should be included in the response. */
  attachResource: {
    responses: {
      /** Successfully attached the resource to the given object. */
      200: {
        content: {
          "application/json": components["schemas"]["AttachedResourceResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
    /** Request to attach a resource. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachResourceRequest"];
      };
    };
  };
  /**
   * Gets typeahead results to render as a dropdown list in the resource lookup input field.
   *
   * When the user types into the lookup input field, Asana will send a request containing the entered string to the application's `typeahead_url`. The list of [TypeaheadItem](/docs/typeahead-item)s in the response will then be rendered in a dropdown list. When the user selects an item from the list, Asana will send a [resource attach](/docs/resource-attach) request to the app server, then process the response and render the attached resource in the widget.
   */
  getTypeaheadResults: {
    responses: {
      /** Successfully retrieved typeahead results. */
      200: {
        content: {
          "application/json": components["schemas"]["TypeaheadListResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
    /** Request to retrieve typeahead results for a resource lookup query. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeaheadListRequest"];
      };
    };
  };
  /**
   * Get the metadata from the app server to render a form. <br> <br> <a href="../images/ac-form-metadata.png">
   *   <img src="../images/ac-form-metadata.png" alt="App components form metadata request flow"/>
   * </a>
   */
  getFormMetadata: {
    parameters: {
      query: {
        /** The workspace GID this hook is coming from. */
        workspace: components["parameters"]["workspace"];
        /** The task GID this hook is coming from. */
        task: components["parameters"]["task"];
        /** The user GID` this hook is coming from. */
        user: components["parameters"]["user"];
        /** The time (in ISO 8601 date format) when the request should expire. */
        expires_at: components["parameters"]["expires_at"];
      };
    };
    responses: {
      /** Successfully retrieved the metadata for a single form. */
      200: {
        content: {
          "application/json": components["schemas"]["FormMetadataResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /**
   * If a modal form field is of type `typehead`, this operation gets typeahead results to render as a dropdown list.
   *
   * When the user types into a modal form form field, Asana will send a request containing the entered string to the application's `typeahead_url`. The list of [TypeaheadItem](/docs/typeahead-item)s in the response will then be rendered in a dropdown list. <br> <br> <a href="../images/ac-form-typeahead.png">
   *   <img src="../images/ac-form-typeahead.png" alt="App components form typeahead request flow"/>
   * </a>
   */
  getModalFormTypeaheadResults: {
    responses: {
      /** Successfully retrieved typeahead results. */
      200: {
        content: {
          "application/json": components["schemas"]["TypeaheadListResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
    /** Request to retrieve typeahead results in a modal form typeahead form field. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeaheadListRequest"];
      };
    };
  };
  /**
   * In a rule action typeahead form field, this operation gets typeahead results to render as a dropdown list. Typeahead results are limited to 50 items.
   *
   * When the user types into a rule action form field, Asana will send a request containing the entered string to the application's `typeahead_url`. The list of [TypeaheadItem](/docs/typeahead-item)s in the response will then be rendered in a dropdown list. <br> <br> <a href="../images/ac-rule-typeahead.png">
   *   <img src="../images/ac-rule-typeahead.png" alt="App components rule typeahead request flow"/>
   * </a>
   */
  getRuleActionTypeaheadResults: {
    responses: {
      /** Successfully retrieved typeahead results. */
      200: {
        content: {
          "application/json": components["schemas"]["TypeaheadListResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
    /** Request to retrieve typeahead results in a rule action typeahead form field. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeaheadListRequest"];
      };
    };
  };
  /**
   * The callback request made to an app server when a watched field's value changes within a form. <br> <br> <a href="../images/ac-form-on-change.png">
   *   <img src="../images/ac-form-on-change.png" alt="App components form on change request flow"/>
   * </a>
   */
  onFormChange: {
    responses: {
      /** Successfully returned the new state of the form. */
      200: {
        content: {
          "application/json": components["schemas"]["FormMetadataResponse"];
        };
      };
      /** Something was wrong with the form data. */
      400: {
        content: {
          "application/json": components["schemas"]["FormMetadataResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
    /** Request to notify of an on change event. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FormOnChangeRequest"];
      };
    };
  };
  /**
   * The callback request made to an app server when a form is submitted. <br> <br> <a href="../images/ac-form-on-submit.png">
   *   <img src="../images/ac-form-on-submit.png" alt="App components form on submit request flow"/>
   * </a>
   */
  onFormSubmit: {
    responses: {
      /** Successfully attached the resource created by the form. */
      200: {
        content: {
          "application/json": components["schemas"]["AttachedResourceResponse"];
        };
      };
      /** Something was wrong with the form data. */
      400: {
        content: {
          "application/json": components["schemas"]["FormMetadataResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
    /** Request to notify of a form submission. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FormSubmissionRequest"];
      };
    };
  };
  /**
   * The request made when an action is triggered. <br> <br> <a href="../images/ac-rule-run-action.png">
   *   <img src="../images/ac-rule-run-action.png" alt="App components rule run action request flow"/>
   * </a>
   */
  runAction: {
    responses: {
      /** Successfully attached the resource created by the form. */
      200: {
        content: {
          "application/json": components["schemas"]["RanActionResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      410: components["responses"]["Gone"];
      500: components["responses"]["InternalServerError"];
    };
    /** Request to notify of an action running. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunActionRequest"];
      };
    };
  };
  /**
   * When a user has navigated to the [custom rule builder](https://asana.com/guide/help/premium/rules#gl-create-rule) UI and selected a rule action (either through the sidebar or via a rule preset), Asana will make a request to the app to get the configuration form definition for the chosen rule action. This will initiate the flow to configure a new rule action or edit the configuration of an existing rule action. This is the endpoint and schema for updating rule actions; app triggers (V2) will be analogous. <br> <br> <a href="../images/ac-rule-metadata.png">
   *   <img src="../images/ac-rule-metadata.png" alt="App components rule metadata request flow"/>
   * </a>
   */
  getActionMetadata: {
    parameters: {
      query: {
        /** The ID of an existing rule action that is being edited. Should be omitted when configuring a new rule action. */
        action?: components["parameters"]["action"];
        /** The ID of the configuration used to create the rule action. */
        action_type: components["parameters"]["action_type"];
        /** The project GID this hook is coming from. */
        project: components["parameters"]["project"];
        /** The workspace GID this hook is coming from. */
        workspace: components["parameters"]["workspace"];
        /** The user GID` this hook is coming from. */
        user: components["parameters"]["user"];
        /** The time (in ISO 8601 date format) when the request should expire. */
        expires_at: components["parameters"]["expires_at"];
      };
    };
    responses: {
      /** Successfully retrieved the metadata for a single action. */
      200: {
        content: {
          "application/json": components["schemas"]["FormMetadataResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /**
   * The callback request made to an app server when a watched field's value changes within an action form. <br> <br> <a href="../images/ac-rule-on-change.png">
   *   <img src="../images/ac-rule-on-change.png" alt="App components rule on change request flow"/>
   * </a>
   */
  onActionFormChange: {
    responses: {
      /** Successfully returned the new state of the form. */
      200: {
        content: {
          "application/json": components["schemas"]["FormMetadataResponse"];
        };
      };
      /** Something was wrong with the form data. */
      400: {
        content: {
          "application/json": components["schemas"]["FormMetadataResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
    /** Request to notify of an on change event. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActionFormOnChangeRequest"];
      };
    };
  };
  /**
   * The form is submitted when the user chooses to create their rule. Asana will create the rule action data model object and make a signed request to the `on_submit_callback` specified in the form metadata returned from the fetch/update rule action form endpoints. Information about the created rule action should be included in the response if it was successfully created. This is the endpoint and schema for updating rule actions; app triggers (V2) will be analogous. <br> <br> <a href="../images/ac-rule-on-submit.png">
   *   <img src="../images/ac-rule-on-submit.png" alt="App components rule on submit request flow"/>
   * </a>
   */
  onActionFormSubmit: {
    responses: {
      /** Successfully handled form submission. */
      200: unknown;
      /** Something was wrong with the form data. */
      400: {
        content: {
          "application/json": components["schemas"]["FormMetadataResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
    /** Request to submit an action form. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActionFormSubmissionRequest"];
      };
    };
  };
}

export interface external {}
